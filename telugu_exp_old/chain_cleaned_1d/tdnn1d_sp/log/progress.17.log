# nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/17.mdl && nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/16.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/17.mdl 
# Started at Wed Jun 15 12:18:58 UTC 2022
#
nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/17.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 3800
prior-dimension: 0
# Nnet info follows.
left-context: 28
right-context: 28
num-parameters: 9533872
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=3800
output-node name=output input=output.affine dim=3800 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=3800
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=3800 output-dim=3800
output-node name=output-xent input=output-xent.log-softmax dim=3800 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.00678, bias-{mean,stddev}=-0.001585,0.01579
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=0.000612109, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.0354, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.23,0.24 0.25,0.27,0.48,0.61,0.74 0.88,1.0,1.1,1.6), mean=0.483, stddev=0.205], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.73,0.74,0.77 0.79,0.82,1.1,1.3,1.4 1.5,1.7,1.7,1.9), mean=1.1, stddev=0.253], bias-{mean,stddev}=0.003507,0.1271, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=2.63e+06, self-repaired-proportion=0.316731, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 1e-06,0.001,0.03,0.10,0.13 0.23,0.33,0.39,0.70), mean=0.0575, stddev=0.0822], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0002,0.07,0.35,0.93,0.98 1.0,1.0,1.0,1.0), mean=0.467, stddev=0.391], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.04,0.04,0.06,0.08 0.09,0.11,0.12,0.18), mean=0.0501, stddev=0.0204], oderiv-count=4.68675e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=47294.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 3e-06,0.001,0.03,0.09,0.13 0.22,0.32,0.38,0.68), mean=0.0561, stddev=0.0796], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0002,0.006,0.04,0.06,0.07 0.08,0.09,0.09,0.14), mean=0.0357, stddev=0.0273]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.388889, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000612109, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.02479, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.1 1.1,1.1,1.1,1.1,1.1 1.1,1.1,1.1,1.1), mean=1.12, stddev=0.00162], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.19,0.20 0.21,0.22,0.27,0.32,0.35 0.37,0.41,0.44,0.54), mean=0.275, stddev=0.0557], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000612109, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.02413, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.25,0.27 0.29,0.32,0.37,0.43,0.48 0.51,0.57,0.61,0.79), mean=0.378, stddev=0.0769], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.69,0.70,0.71 0.72,0.74,0.77,0.80,0.82 0.84,0.86,0.87,0.91), mean=0.771, stddev=0.0389], bias-{mean,stddev}=-0.03924,0.2632, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.15e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.08,0.10,0.14 0.18,0.24,0.34,0.43,0.49 0.54,0.59,0.61,0.74), mean=0.338, stddev=0.118], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.19,0.22,0.27 0.32,0.37,0.49,0.60,0.69 0.75,0.81,0.83,0.89), mean=0.492, stddev=0.142], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.003,0.003,0.004,0.005 0.005,0.006,0.007,0.01), mean=0.00329, stddev=0.00109], oderiv-count=4.64491e+06
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46782.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.08,0.11,0.14 0.18,0.24,0.33,0.43,0.48 0.53,0.58,0.61,0.73), mean=0.334, stddev=0.116], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.25,0.28,0.34 0.36,0.41,0.49,0.57,0.61 0.65,0.70,0.73,0.83), mean=0.492, stddev=0.098]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.388889, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000612109, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.02094, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.94,0.94,0.95 0.95,0.95,0.95,0.95,0.95 0.95,0.95,0.95,0.95), mean=0.948, stddev=0.00129], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.20,0.21,0.23,0.26,0.27 0.28,0.30,0.31,0.39), mean=0.235, stddev=0.0278], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000612109, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.02125, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.25,0.26,0.28 0.29,0.30,0.33,0.37,0.39 0.40,0.43,0.45,0.61), mean=0.337, stddev=0.0419], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.61,0.62,0.63 0.64,0.66,0.68,0.70,0.72 0.73,0.74,0.74,0.79), mean=0.679, stddev=0.0287], bias-{mean,stddev}=-0.02633,0.2524, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.15e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.10,0.12,0.15 0.19,0.24,0.35,0.45,0.52 0.57,0.61,0.64,0.82), mean=0.349, stddev=0.125], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.20,0.22,0.28 0.31,0.38,0.49,0.59,0.66 0.70,0.74,0.76,0.87), mean=0.486, stddev=0.129], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.002,0.002 0.002,0.002,0.002,0.003,0.003 0.004,0.004,0.005,0.01), mean=0.00244, stddev=0.000739], oderiv-count=4.50034e+06
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46270.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.10,0.12,0.15 0.19,0.24,0.35,0.45,0.51 0.56,0.60,0.63,0.81), mean=0.346, stddev=0.122], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.29,0.31,0.37 0.41,0.45,0.52,0.59,0.63 0.66,0.68,0.71,0.77), mean=0.518, stddev=0.0877]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.388889, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000612109, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01873, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.84,0.84,0.85 0.85,0.85,0.85,0.85,0.85 0.85,0.85,0.85,0.85), mean=0.848, stddev=0.00138], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.17,0.18 0.19,0.19,0.21,0.23,0.24 0.25,0.26,0.27,0.34), mean=0.211, stddev=0.0209], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000612109, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.02039, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.27,0.27,0.28 0.29,0.30,0.32,0.35,0.36 0.37,0.39,0.40,0.46), mean=0.325, stddev=0.029], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.59,0.59,0.61 0.61,0.63,0.65,0.67,0.69 0.70,0.71,0.73,0.74), mean=0.652, stddev=0.0295], bias-{mean,stddev}=-0.01539,0.2694, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.89e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.09,0.11,0.15 0.19,0.23,0.34,0.46,0.54 0.61,0.67,0.72,1.1), mean=0.355, stddev=0.139], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.16,0.20,0.26 0.30,0.37,0.48,0.59,0.65 0.70,0.74,0.76,0.86), mean=0.479, stddev=0.134], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.003,0.003 0.003,0.003,0.004,0.005,0.005 0.006,0.007,0.008,0.01), mean=0.00404, stddev=0.00108], oderiv-count=1.51019e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15423.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.09,0.11,0.15 0.19,0.23,0.34,0.45,0.53 0.60,0.66,0.71,1.0), mean=0.351, stddev=0.137], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.29,0.32,0.37 0.42,0.45,0.54,0.60,0.64 0.68,0.71,0.76,0.81), mean=0.53, stddev=0.0924]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.388889, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000612109, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.0216, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.69,0.69,0.69 0.69,0.69,0.69,0.69,0.69 0.69,0.69,0.69,0.69), mean=0.691, stddev=0.00093], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.20,0.21,0.21 0.22,0.23,0.24,0.26,0.27 0.27,0.28,0.29,0.30), mean=0.244, stddev=0.0186], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000612109, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.0259, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.23,0.24 0.25,0.27,0.29,0.32,0.33 0.34,0.35,0.36,0.43), mean=0.292, stddev=0.0295], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.77,0.77,0.78 0.79,0.80,0.83,0.85,0.86 0.87,0.88,0.88,0.90), mean=0.828, stddev=0.0287], bias-{mean,stddev}=-0.01835,0.2566, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.93e+05, self-repaired-proportion=0.000168527, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.05,0.09 0.12,0.16,0.24,0.38,0.45 0.53,0.60,0.64,0.83), mean=0.27, stddev=0.134], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.09,0.13,0.21 0.26,0.32,0.46,0.61,0.68 0.74,0.80,0.84,0.90), mean=0.464, stddev=0.165], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.003 0.004,0.004,0.005,0.007,0.008 0.009,0.01,0.01,0.03), mean=0.00557, stddev=0.00209], oderiv-count=1.51326e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15423.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.05,0.09 0.12,0.15,0.24,0.37,0.44 0.52,0.59,0.63,0.82), mean=0.265, stddev=0.132], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.16,0.19,0.25 0.28,0.32,0.39,0.47,0.50 0.52,0.56,0.58,0.66), mean=0.391, stddev=0.0875]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.388889, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000612109, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01822, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.82,0.82,0.82,0.82 0.82,0.82,0.82,0.83,0.83 0.83,0.83,0.83,0.83), mean=0.825, stddev=0.00129], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.18 0.18,0.19,0.20,0.22,0.23 0.24,0.25,0.25,0.30), mean=0.205, stddev=0.0187], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000612109, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.02081, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.27,0.28,0.29 0.30,0.31,0.33,0.35,0.36 0.37,0.38,0.39,0.44), mean=0.332, stddev=0.0243], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.59,0.60,0.61 0.62,0.64,0.66,0.69,0.71 0.72,0.73,0.76,0.77), mean=0.665, stddev=0.0338], bias-{mean,stddev}=-0.03199,0.2468, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.5e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.10,0.12,0.16 0.20,0.24,0.34,0.46,0.53 0.58,0.64,0.67,0.94), mean=0.353, stddev=0.131], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.20,0.22,0.26 0.31,0.37,0.48,0.58,0.64 0.67,0.69,0.73,0.84), mean=0.477, stddev=0.124], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.003,0.003 0.003,0.003,0.004,0.005,0.006 0.006,0.007,0.008,0.01), mean=0.00402, stddev=0.00114], oderiv-count=1.44326e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14911.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.10,0.12,0.15 0.20,0.24,0.34,0.45,0.52 0.57,0.63,0.66,0.93), mean=0.349, stddev=0.128], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.30,0.33,0.38 0.42,0.47,0.54,0.60,0.64 0.67,0.70,0.72,0.82), mean=0.534, stddev=0.0877]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.388889, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000612109, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01889, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.85,0.85,0.85 0.85,0.85,0.85,0.86,0.86 0.86,0.86,0.86,0.86), mean=0.855, stddev=0.00104], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.18 0.19,0.20,0.21,0.23,0.24 0.25,0.26,0.27,0.29), mean=0.213, stddev=0.0193], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000612109, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.02106, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.29,0.30 0.31,0.32,0.34,0.36,0.37 0.38,0.39,0.39,0.42), mean=0.336, stddev=0.0244], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.60,0.60,0.62 0.63,0.65,0.67,0.70,0.72 0.73,0.74,0.76,0.80), mean=0.673, stddev=0.034], bias-{mean,stddev}=-0.02226,0.2646, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.74e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.12,0.16 0.19,0.24,0.35,0.47,0.54 0.61,0.69,0.74,0.93), mean=0.36, stddev=0.14], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.20,0.23,0.27 0.30,0.37,0.48,0.59,0.65 0.69,0.74,0.77,0.83), mean=0.481, stddev=0.129], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.003 0.003,0.003,0.004,0.005,0.005 0.006,0.007,0.008,0.01), mean=0.00394, stddev=0.00114], oderiv-count=1.38722e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14399.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.13,0.16 0.19,0.24,0.35,0.46,0.54 0.60,0.68,0.73,0.91), mean=0.357, stddev=0.137], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.32,0.34,0.38 0.42,0.46,0.54,0.61,0.65 0.68,0.71,0.73,0.81), mean=0.537, stddev=0.0901]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.388889, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000612109, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01942, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,0.88,0.88,0.88 0.88,0.88,0.88,0.88,0.88 0.88,0.88,0.88,0.88), mean=0.879, stddev=0.000946], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.19 0.19,0.20,0.22,0.24,0.25 0.26,0.27,0.28,0.34), mean=0.219, stddev=0.0223], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000612109, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.02141, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.29,0.29,0.30 0.31,0.32,0.34,0.36,0.37 0.38,0.39,0.40,0.45), mean=0.342, stddev=0.0242], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.61,0.61,0.63 0.64,0.65,0.68,0.71,0.73 0.74,0.75,0.76,0.76), mean=0.684, stddev=0.0336], bias-{mean,stddev}=-0.03337,0.2699, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.38e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.09,0.11,0.16 0.20,0.25,0.36,0.48,0.56 0.61,0.72,0.75,0.92), mean=0.367, stddev=0.141], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.18,0.22,0.27 0.31,0.37,0.48,0.58,0.64 0.68,0.74,0.76,0.80), mean=0.477, stddev=0.128], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.003,0.003,0.003,0.004,0.005 0.006,0.007,0.008,0.02), mean=0.00377, stddev=0.00125], oderiv-count=1.40931e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13887.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.10,0.11,0.15 0.20,0.24,0.35,0.47,0.55 0.60,0.71,0.74,0.91), mean=0.364, stddev=0.139], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.30,0.33,0.38 0.42,0.48,0.56,0.62,0.66 0.70,0.73,0.75,0.81), mean=0.547, stddev=0.0935]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.388889, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000612109, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01995, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.90,0.90,0.90 0.90,0.90,0.90,0.90,0.90 0.90,0.90,0.90,0.91), mean=0.903, stddev=0.000946], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.20,0.21,0.22,0.24,0.25 0.27,0.28,0.30,0.37), mean=0.225, stddev=0.0237], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000612109, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.02179, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.30,0.30,0.31 0.32,0.33,0.35,0.37,0.38 0.39,0.40,0.41,0.43), mean=0.348, stddev=0.0245], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.62,0.63,0.64 0.65,0.66,0.69,0.73,0.74 0.76,0.77,0.81,0.82), mean=0.696, stddev=0.037], bias-{mean,stddev}=-0.02711,0.2622, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.6e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.12,0.13,0.17 0.21,0.27,0.38,0.49,0.56 0.63,0.68,0.72,0.93), mean=0.382, stddev=0.135], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.20,0.23,0.27 0.32,0.37,0.48,0.58,0.63 0.66,0.71,0.73,0.84), mean=0.474, stddev=0.12], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.003,0.003,0.004,0.005 0.005,0.006,0.007,0.01), mean=0.00342, stddev=0.001], oderiv-count=1.33121e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13375.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.12,0.14,0.17 0.21,0.27,0.38,0.49,0.55 0.62,0.67,0.71,0.92), mean=0.379, stddev=0.133], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.33,0.37,0.41 0.45,0.51,0.58,0.65,0.69 0.72,0.75,0.77,0.87), mean=0.575, stddev=0.0923]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.388889, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000612109, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02053, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.93,0.93,0.93 0.93,0.93,0.93,0.93,0.93 0.93,0.93,0.93,0.93), mean=0.929, stddev=0.000913], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.20,0.21,0.23,0.25,0.26 0.27,0.29,0.30,0.37), mean=0.231, stddev=0.0244], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000612109, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.02232, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.29,0.30,0.31 0.32,0.34,0.36,0.38,0.39 0.40,0.41,0.42,0.44), mean=0.356, stddev=0.0257], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.63,0.64,0.65 0.66,0.68,0.71,0.74,0.76 0.78,0.81,0.82,0.84), mean=0.713, stddev=0.0399], bias-{mean,stddev}=-0.002697,0.2616, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.73e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.16,0.18,0.22 0.25,0.29,0.41,0.53,0.59 0.67,0.75,0.77,0.93), mean=0.418, stddev=0.138], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.24,0.26,0.30 0.33,0.38,0.48,0.58,0.63 0.67,0.71,0.74,0.82), mean=0.484, stddev=0.114], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.004,0.004 0.004,0.005,0.005,0.009), mean=0.00304, stddev=0.000746], oderiv-count=1.26144e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12863.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.15,0.18,0.22 0.25,0.29,0.41,0.53,0.59 0.66,0.74,0.77,0.92), mean=0.415, stddev=0.136], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.41,0.43,0.47 0.50,0.54,0.62,0.69,0.74 0.77,0.82,0.86,1.1), mean=0.621, stddev=0.0949]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.388889, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000612109, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02111, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.95,0.95,0.95 0.95,0.95,0.96,0.96,0.96 0.96,0.96,0.96,0.96), mean=0.956, stddev=0.000772], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.19,0.20 0.21,0.22,0.24,0.26,0.27 0.28,0.30,0.31,0.35), mean=0.238, stddev=0.0248], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000612109, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.02277, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.29,0.30,0.32 0.33,0.34,0.36,0.39,0.40 0.41,0.42,0.43,0.47), mean=0.363, stddev=0.0281], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.64,0.66,0.67 0.68,0.69,0.72,0.76,0.79 0.81,0.82,0.83,0.85), mean=0.728, stddev=0.0415], bias-{mean,stddev}=-0.02942,0.2669, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.89e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.14,0.18,0.21 0.24,0.30,0.42,0.55,0.61 0.67,0.72,0.77,0.92), mean=0.428, stddev=0.142], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.22,0.26,0.29 0.32,0.37,0.47,0.57,0.62 0.65,0.69,0.71,0.78), mean=0.469, stddev=0.111], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.003,0.004 0.004,0.005,0.005,0.009), mean=0.00286, stddev=0.000672], oderiv-count=1.22708e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12351.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.15,0.17,0.22 0.25,0.30,0.42,0.55,0.60 0.66,0.71,0.76,0.91), mean=0.426, stddev=0.139], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.41,0.44,0.48 0.52,0.57,0.66,0.74,0.78 0.81,0.87,0.89,1.1), mean=0.654, stddev=0.104]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.388889, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000612109, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02179, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,0.98,0.98,0.98 0.98,0.99,0.99,0.99,0.99 0.99,0.99,0.99,0.99), mean=0.986, stddev=0.000772], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.20,0.21 0.21,0.22,0.24,0.27,0.28 0.29,0.31,0.32,0.37), mean=0.245, stddev=0.0266], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000612109, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.0233, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.28,0.29,0.31 0.33,0.35,0.37,0.40,0.41 0.42,0.44,0.44,0.57), mean=0.371, stddev=0.0323], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.67,0.68 0.69,0.71,0.74,0.78,0.79 0.81,0.82,0.84,0.86), mean=0.744, stddev=0.0393], bias-{mean,stddev}=-0.02027,0.2579, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.67e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.19,0.20,0.24 0.28,0.34,0.45,0.57,0.65 0.70,0.77,0.81,0.94), mean=0.46, stddev=0.139], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.25,0.27,0.30 0.34,0.39,0.47,0.56,0.60 0.64,0.67,0.70,0.85), mean=0.47, stddev=0.101], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.003,0.003 0.003,0.004,0.004,0.007), mean=0.00266, stddev=0.000509], oderiv-count=1.17065e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11839.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.19,0.21,0.24 0.28,0.34,0.45,0.57,0.64 0.69,0.77,0.80,0.93), mean=0.458, stddev=0.136], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.46,0.49,0.53 0.57,0.62,0.70,0.79,0.84 0.87,0.92,0.96,1.1), mean=0.706, stddev=0.105]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.388889, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000612109, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02262, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.0,1.0 1.0,1.0,1.0,1.0,1.0 1.0,1.0,1.0,1.0), mean=1.02, stddev=0.000846], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.21,0.21 0.22,0.23,0.25,0.27,0.29 0.31,0.33,0.35,0.43), mean=0.254, stddev=0.0296], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000612109, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.02358, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.29,0.30,0.31 0.34,0.35,0.38,0.40,0.41 0.42,0.44,0.44,0.47), mean=0.376, stddev=0.0319], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.66,0.67,0.68 0.71,0.72,0.75,0.79,0.81 0.83,0.84,0.85,0.88), mean=0.753, stddev=0.0424], bias-{mean,stddev}=-0.01837,0.2553, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.68e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.21,0.23,0.27 0.32,0.37,0.49,0.61,0.68 0.73,0.79,0.82,0.98), mean=0.494, stddev=0.14], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.26,0.28,0.32 0.35,0.39,0.47,0.55,0.59 0.62,0.66,0.67,0.74), mean=0.472, stddev=0.0928], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.002,0.003,0.003 0.003,0.004,0.004,0.004), mean=0.00251, stddev=0.000409], oderiv-count=1.09937e+06
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11327.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.21,0.23,0.28 0.32,0.37,0.49,0.61,0.68 0.73,0.78,0.81,0.97), mean=0.492, stddev=0.138], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.52,0.54,0.57 0.62,0.67,0.76,0.85,0.89 0.93,0.97,1.0,1.1), mean=0.759, stddev=0.106]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0.388889, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000612109, l2-regularize=0.008, max-change=0.75, params-rms=0.03083, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,0.99,0.99,0.99 0.99,0.99,0.99,0.99,0.99 0.99,0.99,0.99,0.99), mean=0.987, stddev=0.000598], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.44,0.44,0.45 0.46,0.47,0.49,0.51,0.52 0.53,0.54,0.55,0.60), mean=0.493, stddev=0.0249], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000612109, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.02346, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.27,0.28,0.30 0.31,0.33,0.37,0.41,0.43 0.45,0.46,0.47,0.51), mean=0.372, stddev=0.0467], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.68,0.68,0.69 0.71,0.72,0.75,0.77,0.79 0.81,0.83,0.84,0.85), mean=0.75, stddev=0.0333], bias-{mean,stddev}=-0.02196,0.2612, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=6.97e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.21,0.25,0.30 0.35,0.41,0.54,0.67,0.74 0.80,0.89,0.93,1.0), mean=0.541, stddev=0.154], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.26,0.27,0.31 0.35,0.39,0.45,0.52,0.55 0.58,0.63,0.66,0.70), mean=0.452, stddev=0.0832], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.003,0.003,0.003,0.004,0.004 0.005,0.005,0.006,0.007), mean=0.0034, stddev=0.000755], oderiv-count=1.07064e+06
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11327.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.22,0.25,0.30 0.35,0.41,0.54,0.67,0.73 0.80,0.89,0.92,0.98), mean=0.54, stddev=0.151], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.57,0.61,0.66 0.72,0.79,0.91,1.0,1.1 1.1,1.1,1.2,1.6), mean=0.9, stddev=0.136]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000612109, l2-regularize=0.008, max-change=0.75, params-rms=0.03092, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,0.99,0.99,0.99 0.99,0.99,0.99,0.99,0.99 0.99,0.99,0.99,0.99), mean=0.989, stddev=0.000598], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.40,0.43 0.44,0.46,0.49,0.53,0.55 0.56,0.58,0.59,0.62), mean=0.493, stddev=0.0429], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11327.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-4e-08,-3e-08,-2e-08 -2e-08,-1e-08,-3e-09,1e-08,1e-08 2e-08,2e-08,3e-08,3e-08), mean=-1.98e-09, stddev=1.34e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.3 1.3,1.4,1.4,1.5,1.6 1.6,1.7,1.7,1.7), mean=1.44, stddev=0.109]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3800, learning-rate=0.000612109, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.02816, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-10,5e-10,5e-10,6e-10 0.05,0.12,0.44,0.61,0.65 0.67,0.70,0.72,0.87), mean=0.392, stddev=0.222], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.4,1.4 1.5,1.6,1.7,1.9,1.9 2.0,2.0,2.1,2.2), mean=1.73, stddev=0.158], bias-{mean,stddev}=0.00185,0.1235, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000612109, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.02319, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.26,0.28,0.31 0.33,0.34,0.37,0.40,0.41 0.42,0.43,0.44,0.50), mean=0.369, stddev=0.04], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.67,0.68,0.69 0.70,0.71,0.74,0.77,0.79 0.80,0.82,0.83,0.85), mean=0.741, stddev=0.0353], bias-{mean,stddev}=-0.02841,0.257, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.51e+05, self-repaired-proportion=0.00585938, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-06,0.16,0.20,0.26 0.31,0.38,0.50,0.63,0.70 0.75,0.81,0.85,0.98), mean=0.505, stddev=0.153], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.23,0.25,0.31 0.35,0.40,0.48,0.56,0.59 0.62,0.66,0.68,0.74), mean=0.473, stddev=0.0997], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.002,0.002,0.003,0.003 0.003,0.004,0.005,0.03), mean=0.0025, stddev=0.00212], oderiv-count=1.11363e+06
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11327.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.16,0.19,0.25 0.31,0.37,0.50,0.63,0.69 0.74,0.79,0.84,0.96), mean=0.499, stddev=0.151], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.44,0.48,0.55 0.61,0.67,0.77,0.85,0.88 0.91,0.94,0.97,1.3), mean=0.755, stddev=0.124]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000612109, l2-regularize=0.008, max-change=0.75, params-rms=0.02723, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.87,0.87,0.87 0.87,0.87,0.87,0.87,0.87 0.87,0.87,0.87,0.87), mean=0.871, stddev=0.000244], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.36,0.37,0.38 0.39,0.41,0.43,0.46,0.48 0.49,0.51,0.52,0.58), mean=0.434, stddev=0.0328], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11327.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3e-08,-2e-08,-2e-08,-2e-08 -1e-08,-8e-09,8e-10,1e-08,1e-08 2e-08,2e-08,2e-08,3e-08), mean=4.66e-10, stddev=1.12e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.80,0.80,0.81 0.82,0.83,0.87,0.91,0.93 0.96,0.97,0.99,1.1), mean=0.873, stddev=0.0451]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3800, learning-rate=0.00306055, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.0537, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.07,0.87,1.2,1.3 1.3,1.4,1.4,1.8), mean=0.708, stddev=0.487], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3.0,3.1,3.1,3.1 3.2,3.2,3.3,3.4,3.4 3.5,3.5,3.5,3.6), mean=3.31, stddev=0.107], bias-{mean,stddev}=1.612e-08,0.1218, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=3800, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 4e-05,8e-05,0.0006,0.002,0.002 0.003,0.004,0.004,0.04), mean=0.000889, stddev=0.0012], oderiv-count=1.07455e+06
nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/16.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/17.mdl 
LOG (nnet3-show-progress[5.5.1009~1-e4940]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1009~1-e4940]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:1.43835 tdnnf2.linear:0.892766 tdnnf2.affine:0.956464 tdnnf3.linear:0.81247 tdnnf3.affine:0.844458 tdnnf4.linear:0.751559 tdnnf4.affine:0.807918 tdnnf5.linear:0.59533 tdnnf5.affine:0.666239 tdnnf6.linear:0.743596 tdnnf6.affine:0.807043 tdnnf7.linear:0.737233 tdnnf7.affine:0.798715 tdnnf8.linear:0.720406 tdnnf8.affine:0.791191 tdnnf9.linear:0.69986 tdnnf9.affine:0.771025 tdnnf10.linear:0.677929 tdnnf10.affine:0.757362 tdnnf11.linear:0.657972 tdnnf11.affine:0.751542 tdnnf12.linear:0.641552 tdnnf12.affine:0.74954 tdnnf13.linear:0.631643 tdnnf13.affine:0.768083 prefinal-l:0.698578 prefinal-chain.affine:0.800756 prefinal-chain.linear:0.683244 output.affine:1.15964 prefinal-xent.affine:0.657341 prefinal-xent.linear:0.534782 output-xent.affine:1.55235 ]
LOG (nnet3-show-progress[5.5.1009~1-e4940]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:17.2883 tdnnf2.linear:12.6923 tdnnf2.affine:15.0055 tdnnf3.linear:10.7232 tdnnf3.affine:13.5765 tdnnf4.linear:9.59151 tdnnf4.affine:13.5493 tdnnf5.linear:7.81987 tdnnf5.affine:12.4764 tdnnf6.linear:9.3307 tdnnf6.affine:13.3006 tdnnf7.linear:9.671 tdnnf7.affine:13.7286 tdnnf8.linear:9.94061 tdnnf8.affine:13.9944 tdnnf9.linear:10.2164 tdnnf9.affine:13.9853 tdnnf10.linear:10.509 tdnnf10.affine:14.1644 tdnnf11.linear:10.8104 tdnnf11.affine:14.484 tdnnf12.linear:11.156 tdnnf12.affine:14.5201 tdnnf13.linear:11.5833 tdnnf13.affine:14.5903 prefinal-l:15.7873 prefinal-chain.affine:14.6474 prefinal-chain.linear:15.8302 output.affine:28.7976 prefinal-xent.affine:14.4733 prefinal-xent.linear:13.9393 output-xent.affine:53.4928 ]
LOG (nnet3-show-progress[5.5.1009~1-e4940]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0823633 tdnnf2.linear:0.0697314 tdnnf2.affine:0.0626121 tdnnf3.linear:0.0753451 tdnnf3.affine:0.0609355 tdnnf4.linear:0.077995 tdnnf4.affine:0.0583053 tdnnf5.linear:0.0756241 tdnnf5.affine:0.0520886 tdnnf6.linear:0.0793254 tdnnf6.affine:0.0594237 tdnnf7.linear:0.0759403 tdnnf7.affine:0.0569647 tdnnf8.linear:0.0721909 tdnnf8.affine:0.0553779 tdnnf9.linear:0.0682698 tdnnf9.affine:0.0540224 tdnnf10.linear:0.0643063 tdnnf10.affine:0.0524061 tdnnf11.linear:0.0606772 tdnnf11.affine:0.0508714 tdnnf12.linear:0.0573528 tdnnf12.affine:0.0506503 tdnnf13.linear:0.0543903 tdnnf13.affine:0.0517026 prefinal-l:0.0441473 prefinal-chain.affine:0.0537752 prefinal-chain.linear:0.0432452 output.affine:0.0405043 prefinal-xent.affine:0.0447643 prefinal-xent.linear:0.0385299 output-xent.affine:0.0292834 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Wed Jun 15 12:18:59 UTC 2022, elapsed time 1 seconds
