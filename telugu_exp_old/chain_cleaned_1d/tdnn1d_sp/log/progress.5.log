# nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/5.mdl && nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/4.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/5.mdl 
# Started at Wed Jun 15 03:42:39 UTC 2022
#
nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/5.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 3800
prior-dimension: 0
# Nnet info follows.
left-context: 28
right-context: 28
num-parameters: 9533872
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=3800
output-node name=output input=output.affine dim=3800 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=3800
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=3800 output-dim=3800
output-node name=output-xent input=output-xent.log-softmax dim=3800 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.00678, bias-{mean,stddev}=-0.001585,0.01579
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=0.00102445, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.0407, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.48,0.50,0.51 0.52,0.54,0.57,0.64,0.69 0.79,0.89,0.93,1.5), mean=0.597, stddev=0.0906], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.2 1.2,1.2,1.3,1.4,1.5 1.6,1.7,1.8,1.8), mean=1.3, stddev=0.136], bias-{mean,stddev}=-0.006997,0.4763, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.05e+06, self-repaired-proportion=0.765301, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.05,0.42,0.65 0.87,1.1,1.2,1.9), mean=0.203, stddev=0.304], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.47,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.483, stddev=0.459], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.04,0.06,0.07,0.08 0.09,0.11,0.13,0.20), mean=0.0567, stddev=0.0204], oderiv-count=4.66943e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=47513.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.05,0.38,0.60 0.81,1.0,1.1,1.8), mean=0.188, stddev=0.282], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.05,0.09,0.10 0.11,0.12,0.13,0.15), mean=0.0483, stddev=0.044]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.00102445, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.02424, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.1 1.1,1.1,1.1,1.1,1.1 1.1,1.1,1.1,1.1), mean=1.1, stddev=0.00274], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.20,0.20,0.21 0.22,0.23,0.27,0.30,0.33 0.35,0.38,0.39,0.52), mean=0.271, stddev=0.0431], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.00102445, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.03567, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.46,0.48,0.51 0.52,0.54,0.57,0.60,0.62 0.64,0.66,0.69,0.92), mean=0.569, stddev=0.0447], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.1 1.1,1.1,1.1,1.2,1.2 1.2,1.2,1.2,1.2), mean=1.14, stddev=0.0306], bias-{mean,stddev}=-0.008379,0.5176, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.08e+06, self-repaired-proportion=0.00660241, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.05,0.07,0.10 0.14,0.19,0.38,0.65,0.82 0.97,1.1,1.2,1.8), mean=0.434, stddev=0.275], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.09,0.12,0.16 0.22,0.28,0.49,0.70,0.81 0.86,0.91,0.92,0.98), mean=0.498, stddev=0.216], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.003,0.004,0.005,0.006 0.007,0.009,0.01,0.03), mean=0.004, stddev=0.00204], oderiv-count=4.65085e+06
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=47001.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.06,0.07,0.12 0.15,0.21,0.39,0.63,0.79 0.93,1.1,1.1,1.7), mean=0.434, stddev=0.255], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.24,0.28,0.34 0.40,0.46,0.57,0.69,0.75 0.80,0.86,0.91,1.0), mean=0.574, stddev=0.141]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.00102445, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.0204, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.92,0.92,0.92 0.92,0.92,0.92,0.92,0.93 0.93,0.93,0.93,0.93), mean=0.923, stddev=0.00217], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.20,0.21,0.23,0.25,0.26 0.27,0.28,0.29,0.36), mean=0.23, stddev=0.023], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.00102445, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.03472, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.48,0.49,0.50 0.51,0.53,0.55,0.58,0.59 0.60,0.62,0.63,0.68), mean=0.555, stddev=0.031], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.1,1.1 1.1,1.1,1.1,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.11, stddev=0.0274], bias-{mean,stddev}=-0.008279,0.5225, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=2.91e+06, self-repaired-proportion=0.00254823, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.07,0.09,0.13 0.18,0.24,0.43,0.70,0.88 1.0,1.2,1.3,1.7), mean=0.483, stddev=0.276], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.10,0.13,0.19 0.23,0.31,0.49,0.67,0.76 0.81,0.87,0.88,0.96), mean=0.493, stddev=0.194], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.002 0.002,0.002,0.002,0.003,0.004 0.004,0.006,0.007,0.01), mean=0.0027, stddev=0.00114], oderiv-count=4.44783e+06
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46489.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.09,0.10,0.15 0.19,0.25,0.44,0.68,0.85 0.97,1.1,1.2,1.6), mean=0.482, stddev=0.259], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.31,0.36,0.43 0.48,0.54,0.67,0.80,0.86 0.91,0.96,1.0,1.2), mean=0.67, stddev=0.15]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.00102445, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01873, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.84,0.84,0.84 0.85,0.85,0.85,0.85,0.85 0.85,0.85,0.85,0.85), mean=0.848, stddev=0.00184], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.18 0.19,0.20,0.21,0.22,0.23 0.24,0.25,0.26,0.33), mean=0.211, stddev=0.0181], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.00102445, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.03445, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.48,0.49,0.50 0.51,0.53,0.55,0.57,0.59 0.60,0.61,0.62,0.64), mean=0.551, stddev=0.0285], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.0,1.1 1.1,1.1,1.1,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.1, stddev=0.0259], bias-{mean,stddev}=0.004333,0.5688, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.04e+06, self-repaired-proportion=0.00267622, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.09,0.10,0.15 0.20,0.28,0.47,0.75,0.94 1.1,1.3,1.4,2.2), mean=0.532, stddev=0.306], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.10,0.12,0.18 0.23,0.31,0.49,0.67,0.75 0.82,0.86,0.88,0.95), mean=0.493, stddev=0.193], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.003,0.003,0.004,0.005,0.006 0.007,0.008,0.009,0.02), mean=0.00407, stddev=0.0014], oderiv-count=1.5056e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15496.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.09,0.11,0.16 0.21,0.29,0.47,0.73,0.91 1.1,1.2,1.4,2.1), mean=0.524, stddev=0.287], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.36,0.40,0.46 0.53,0.60,0.73,0.86,0.93 0.99,1.1,1.1,1.3), mean=0.731, stddev=0.161]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.00102445, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.02338, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.74,0.75,0.75 0.75,0.75,0.75,0.75,0.75 0.75,0.75,0.75,0.75), mean=0.748, stddev=0.00176], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.23,0.24 0.24,0.25,0.26,0.28,0.29 0.29,0.30,0.31,0.33), mean=0.264, stddev=0.0178], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.00102445, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.04795, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.45,0.46,0.48 0.49,0.51,0.54,0.57,0.59 0.60,0.62,0.63,0.65), mean=0.541, stddev=0.0381], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.5,1.5,1.6,1.6 1.6,1.6,1.6,1.6), mean=1.53, stddev=0.0331], bias-{mean,stddev}=-0.002302,0.5411, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.5e+05, self-repaired-proportion=0.00856416, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.05,0.06,0.11 0.15,0.21,0.39,0.69,0.87 1.1,1.3,1.3,1.8), mean=0.465, stddev=0.3], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.08,0.10,0.16 0.22,0.29,0.47,0.68,0.76 0.84,0.90,0.93,0.99), mean=0.486, stddev=0.208], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.003 0.003,0.003,0.004,0.006,0.007 0.008,0.01,0.01,0.03), mean=0.00464, stddev=0.00224], oderiv-count=1.477e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15496.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.05,0.07,0.12 0.15,0.21,0.39,0.67,0.84 1.0,1.2,1.3,1.7), mean=0.452, stddev=0.283], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.25,0.29,0.35 0.40,0.47,0.61,0.76,0.83 0.88,0.96,0.99,1.1), mean=0.615, stddev=0.165]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.00102445, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01808, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.81,0.81,0.82 0.82,0.82,0.82,0.82,0.82 0.82,0.82,0.82,0.82), mean=0.818, stddev=0.00169], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.18 0.19,0.19,0.20,0.22,0.22 0.23,0.24,0.24,0.27), mean=0.204, stddev=0.0154], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.00102445, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.03452, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.49,0.50,0.51 0.52,0.53,0.55,0.57,0.58 0.59,0.61,0.61,0.63), mean=0.552, stddev=0.0261], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.1,1.1 1.1,1.1,1.1,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.1, stddev=0.0262], bias-{mean,stddev}=-0.0196,0.5159, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.27e+05, self-repaired-proportion=0.00167969, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.09,0.11,0.17 0.23,0.29,0.49,0.75,0.91 1.1,1.2,1.3,2.0), mean=0.533, stddev=0.278], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.12,0.14,0.19 0.26,0.32,0.48,0.64,0.71 0.76,0.81,0.85,0.95), mean=0.483, stddev=0.174], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.003,0.003,0.004,0.005 0.006,0.007,0.008,0.02), mean=0.00362, stddev=0.00132], oderiv-count=1.42861e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14984.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.10,0.11,0.17 0.23,0.30,0.48,0.73,0.88 1.0,1.1,1.2,1.9), mean=0.525, stddev=0.262], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.36,0.40,0.49 0.55,0.63,0.76,0.89,0.96 1.0,1.1,1.1,1.2), mean=0.761, stddev=0.16]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.00102445, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01838, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.83,0.83,0.83 0.83,0.83,0.83,0.83,0.83 0.83,0.83,0.83,0.84), mean=0.832, stddev=0.00131], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.18 0.19,0.19,0.21,0.22,0.23 0.23,0.24,0.25,0.28), mean=0.207, stddev=0.0157], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.00102445, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.03467, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.49,0.50,0.51 0.52,0.53,0.56,0.58,0.59 0.60,0.61,0.61,0.64), mean=0.554, stddev=0.0264], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.1 1.1,1.1,1.1,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.11, stddev=0.0279], bias-{mean,stddev}=0.005035,0.5513, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.75e+05, self-repaired-proportion=0.000395589, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.11,0.13,0.17 0.22,0.29,0.49,0.78,0.97 1.2,1.3,1.5,1.9), mean=0.555, stddev=0.305], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.13,0.15,0.19 0.24,0.32,0.49,0.65,0.73 0.78,0.85,0.88,0.94), mean=0.49, stddev=0.182], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.003,0.003,0.004,0.005 0.006,0.007,0.008,0.01), mean=0.00356, stddev=0.00128], oderiv-count=1.41076e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14472.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.12,0.13,0.17 0.22,0.30,0.49,0.76,0.93 1.1,1.3,1.4,1.8), mean=0.545, stddev=0.288], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.42,0.44,0.50 0.54,0.62,0.77,0.92,1.0 1.1,1.1,1.2,1.4), mean=0.772, stddev=0.171]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.00102445, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01865, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.84,0.84,0.84 0.84,0.84,0.84,0.85,0.85 0.85,0.85,0.85,0.85), mean=0.844, stddev=0.00134], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.18,0.18 0.19,0.20,0.21,0.22,0.23 0.24,0.25,0.26,0.31), mean=0.21, stddev=0.0175], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.00102445, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.03473, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.50,0.51,0.51 0.52,0.53,0.55,0.58,0.59 0.60,0.61,0.62,0.65), mean=0.555, stddev=0.026], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.1 1.1,1.1,1.1,1.1,1.1 1.2,1.2,1.2,1.2), mean=1.11, stddev=0.0267], bias-{mean,stddev}=-0.01825,0.5608, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.1e+05, self-repaired-proportion=1.5001e-06, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.10,0.11,0.15 0.20,0.30,0.50,0.77,0.96 1.1,1.4,1.5,1.9), mean=0.551, stddev=0.304], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.11,0.14,0.18 0.24,0.32,0.49,0.65,0.72 0.79,0.84,0.86,0.90), mean=0.485, stddev=0.181], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.003,0.003,0.004,0.005 0.006,0.007,0.008,0.02), mean=0.00358, stddev=0.00143], oderiv-count=1.32073e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13960.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.10,0.11,0.16 0.21,0.30,0.50,0.74,0.92 1.1,1.3,1.4,1.8), mean=0.541, stddev=0.286], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.38,0.41,0.47 0.53,0.62,0.77,0.91,0.98 1.0,1.1,1.1,1.3), mean=0.766, stddev=0.173]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.00102445, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01903, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.86,0.86,0.86 0.86,0.86,0.86,0.86,0.86 0.86,0.86,0.86,0.86), mean=0.861, stddev=0.00109], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.19,0.20,0.21,0.23,0.24 0.25,0.26,0.26,0.34), mean=0.215, stddev=0.0187], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.00102445, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.03494, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.50,0.50,0.52 0.52,0.54,0.56,0.58,0.59 0.60,0.61,0.62,0.64), mean=0.558, stddev=0.0257], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.1 1.1,1.1,1.1,1.1,1.2 1.2,1.2,1.2,1.2), mean=1.12, stddev=0.0286], bias-{mean,stddev}=-0.009556,0.5476, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.86e+05, self-repaired-proportion=6.00962e-06, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.10,0.12,0.16 0.22,0.30,0.52,0.78,0.95 1.1,1.3,1.4,2.0), mean=0.558, stddev=0.292], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.12,0.14,0.18 0.25,0.32,0.49,0.65,0.72 0.77,0.83,0.87,0.92), mean=0.488, stddev=0.177], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.003,0.003,0.004,0.005 0.006,0.007,0.008,0.01), mean=0.00345, stddev=0.00128], oderiv-count=1.32535e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13448.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.11,0.13,0.17 0.22,0.31,0.51,0.76,0.91 1.0,1.2,1.3,1.9), mean=0.548, stddev=0.275], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.40,0.43,0.50 0.56,0.64,0.79,0.92,0.99 1.0,1.1,1.2,1.3), mean=0.78, stddev=0.168]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.00102445, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.0194, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.87,0.88,0.88 0.88,0.88,0.88,0.88,0.88 0.88,0.88,0.88,0.88), mean=0.878, stddev=0.0012], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.20,0.20,0.22,0.23,0.24 0.25,0.26,0.27,0.34), mean=0.219, stddev=0.0189], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.00102445, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.03511, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.50,0.51,0.52 0.53,0.54,0.56,0.58,0.59 0.60,0.61,0.62,0.65), mean=0.561, stddev=0.0259], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.1,1.1 1.1,1.1,1.1,1.1,1.2 1.2,1.2,1.2,1.2), mean=1.12, stddev=0.0307], bias-{mean,stddev}=0.0343,0.5499, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.83e+05, self-repaired-proportion=3.57192e-06, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.14,0.16,0.21 0.26,0.32,0.53,0.84,0.98 1.1,1.4,1.5,1.8), mean=0.59, stddev=0.3], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.15,0.18,0.23 0.27,0.33,0.50,0.67,0.74 0.79,0.83,0.87,0.93), mean=0.502, stddev=0.174], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.004,0.005 0.005,0.006,0.006,0.01), mean=0.00324, stddev=0.000979], oderiv-count=1.28136e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12936.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.15,0.17,0.22 0.26,0.33,0.53,0.82,0.95 1.1,1.3,1.4,1.8), mean=0.58, stddev=0.282], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.46,0.49,0.55 0.61,0.66,0.81,0.95,1.0 1.1,1.2,1.2,1.4), mean=0.809, stddev=0.16]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.00102445, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01993, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.90,0.90,0.90 0.90,0.90,0.90,0.90,0.90 0.90,0.90,0.90,0.91), mean=0.902, stddev=0.00124], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.19,0.20 0.20,0.21,0.22,0.24,0.25 0.26,0.27,0.27,0.30), mean=0.225, stddev=0.0189], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.00102445, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.03528, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.50,0.51,0.52 0.53,0.54,0.56,0.59,0.60 0.61,0.62,0.62,0.67), mean=0.564, stddev=0.027], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.1 1.1,1.1,1.1,1.2,1.2 1.2,1.2,1.2,1.2), mean=1.13, stddev=0.0317], bias-{mean,stddev}=-0.03005,0.5633, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.33e+05, self-repaired-proportion=7.73209e-07, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.12,0.15,0.20 0.25,0.31,0.54,0.81,0.96 1.1,1.3,1.4,1.8), mean=0.575, stddev=0.292], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.14,0.17,0.21 0.25,0.31,0.48,0.64,0.72 0.77,0.82,0.85,0.93), mean=0.481, stddev=0.174], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.002,0.003,0.004,0.004 0.005,0.006,0.007,0.02), mean=0.00318, stddev=0.00104], oderiv-count=1.18684e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12424.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.13,0.16,0.21 0.26,0.33,0.53,0.79,0.93 1.1,1.2,1.3,1.7), mean=0.569, stddev=0.275], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.44,0.48,0.54 0.61,0.68,0.82,0.96,1.0 1.1,1.2,1.2,1.3), mean=0.821, stddev=0.166]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.00102445, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02049, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.92,0.92,0.93 0.93,0.93,0.93,0.93,0.93 0.93,0.93,0.93,0.93), mean=0.927, stddev=0.00106], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.19,0.20 0.21,0.21,0.23,0.25,0.26 0.26,0.28,0.29,0.34), mean=0.231, stddev=0.0201], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.00102445, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.0354, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.51,0.51,0.52 0.53,0.54,0.57,0.59,0.60 0.61,0.62,0.62,0.65), mean=0.566, stddev=0.0261], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.1 1.1,1.1,1.1,1.2,1.2 1.2,1.2,1.2,1.2), mean=1.13, stddev=0.0307], bias-{mean,stddev}=-0.01561,0.5474, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.61e+05, self-repaired-proportion=0.000530175, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.14,0.17,0.22 0.27,0.35,0.54,0.82,0.99 1.2,1.4,1.4,1.8), mean=0.6, stddev=0.291], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.15,0.18,0.22 0.27,0.34,0.48,0.63,0.70 0.75,0.81,0.85,0.95), mean=0.483, stddev=0.162], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.004,0.004 0.004,0.005,0.006,0.01), mean=0.00297, stddev=0.000832], oderiv-count=1.15333e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11912.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.15,0.18,0.23 0.28,0.36,0.54,0.80,0.96 1.1,1.3,1.4,1.7), mean=0.596, stddev=0.274], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.50,0.53,0.60 0.66,0.72,0.85,1.0,1.1 1.1,1.2,1.2,1.4), mean=0.861, stddev=0.163]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.00102445, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02124, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.96,0.96,0.96 0.96,0.96,0.96,0.96,0.96 0.96,0.96,0.96,0.96), mean=0.961, stddev=0.000977], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.20,0.21 0.21,0.22,0.24,0.26,0.27 0.28,0.29,0.30,0.40), mean=0.239, stddev=0.022], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.00102445, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.03541, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.50,0.51,0.52 0.53,0.54,0.57,0.59,0.60 0.61,0.62,0.63,0.66), mean=0.566, stddev=0.0273], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.1 1.1,1.1,1.1,1.2,1.2 1.2,1.2,1.2,1.2), mean=1.13, stddev=0.0314], bias-{mean,stddev}=-0.008457,0.5433, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.55e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.18,0.20,0.25 0.30,0.38,0.58,0.87,1.0 1.2,1.3,1.4,1.8), mean=0.629, stddev=0.287], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.18,0.19,0.24 0.28,0.34,0.48,0.63,0.69 0.74,0.79,0.82,0.88), mean=0.484, stddev=0.154], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.002,0.003,0.003,0.004 0.004,0.004,0.005,0.006), mean=0.00272, stddev=0.000633], oderiv-count=1.09484e+06
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11400.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.20,0.21,0.26 0.31,0.39,0.58,0.85,1.0 1.1,1.3,1.4,1.7), mean=0.627, stddev=0.27], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.57,0.60,0.65 0.70,0.77,0.91,1.1,1.1 1.2,1.3,1.3,1.5), mean=0.917, stddev=0.168]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.00102445, l2-regularize=0.008, max-change=0.75, params-rms=0.02856, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.91,0.91,0.91 0.91,0.91,0.91,0.91,0.91 0.92,0.92,0.92,0.92), mean=0.914, stddev=0.000913], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.40,0.41 0.43,0.44,0.46,0.48,0.49 0.50,0.50,0.51,0.53), mean=0.456, stddev=0.0245], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.00102445, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.03559, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.50,0.51,0.52 0.53,0.54,0.57,0.59,0.60 0.62,0.63,0.64,0.67), mean=0.569, stddev=0.0295], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.1 1.1,1.1,1.1,1.2,1.2 1.2,1.2,1.2,1.2), mean=1.14, stddev=0.029], bias-{mean,stddev}=-0.01062,0.5531, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.49e+05, self-repaired-proportion=0.000703294, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.12,0.14,0.19 0.25,0.34,0.55,0.83,1.0 1.2,1.4,1.5,1.8), mean=0.602, stddev=0.303], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.12,0.15,0.20 0.25,0.32,0.45,0.60,0.67 0.74,0.80,0.84,0.88), mean=0.46, stddev=0.162], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.003,0.003,0.004,0.005 0.006,0.007,0.008,0.01), mean=0.00353, stddev=0.00124], oderiv-count=1.11014e+06
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11400.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.13,0.16,0.22 0.28,0.37,0.56,0.82,0.98 1.1,1.4,1.5,1.8), mean=0.607, stddev=0.287], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.46,0.54,0.61 0.70,0.79,0.99,1.2,1.2 1.3,1.4,1.5,2.0), mean=0.976, stddev=0.217]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.00102445, l2-regularize=0.008, max-change=0.75, params-rms=0.02694, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.86,0.86,0.86 0.86,0.86,0.86,0.86,0.86 0.87,0.87,0.87,0.87), mean=0.862, stddev=0.00192], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.36,0.37,0.38 0.39,0.40,0.43,0.46,0.47 0.48,0.49,0.50,0.54), mean=0.43, stddev=0.0305], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11400.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-4e-08,-4e-08,-3e-08 -2e-08,-2e-08,-1e-09,1e-08,2e-08 3e-08,4e-08,4e-08,5e-08), mean=-7.12e-10, stddev=1.8e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.2 1.2,1.2,1.3,1.4,1.4 1.4,1.5,1.5,1.5), mean=1.3, stddev=0.081]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3800, learning-rate=0.00102445, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.02037, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-10,4e-10,4e-10,4e-10 0.02,0.04,0.31,0.46,0.49 0.52,0.54,0.56,0.61), mean=0.268, stddev=0.185], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,0.92,0.97,1.0 1.1,1.2,1.2,1.3,1.4 1.5,1.5,1.5,1.6), mean=1.25, stddev=0.12], bias-{mean,stddev}=0.0007064,0.0873, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.00102445, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.03406, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.48,0.49,0.50 0.51,0.52,0.55,0.57,0.58 0.59,0.60,0.60,0.62), mean=0.544, stddev=0.0275], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.0,1.0 1.1,1.1,1.1,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.09, stddev=0.0288], bias-{mean,stddev}=-0.001979,0.5339, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=6.86e+05, self-repaired-proportion=0.00732229, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.10,0.13,0.19 0.23,0.30,0.47,0.73,0.93 1.1,1.3,1.4,1.9), mean=0.531, stddev=0.28], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.11,0.15,0.21 0.26,0.33,0.49,0.65,0.74 0.80,0.84,0.88,0.98), mean=0.492, stddev=0.182], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.001,0.001,0.001 0.002,0.002,0.002,0.003,0.003 0.003,0.004,0.004,0.03), mean=0.00233, stddev=0.00198], oderiv-count=1.08242e+06
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11400.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.10,0.13,0.19 0.24,0.30,0.47,0.72,0.90 1.0,1.2,1.3,1.8), mean=0.523, stddev=0.264], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.37,0.43,0.50 0.55,0.60,0.72,0.84,0.92 0.98,1.0,1.1,1.5), mean=0.725, stddev=0.155]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.00102445, l2-regularize=0.008, max-change=0.75, params-rms=0.02243, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.72,0.72,0.72 0.72,0.72,0.72,0.72,0.72 0.72,0.72,0.72,0.72), mean=0.718, stddev=0.000598], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.29,0.29,0.31 0.32,0.34,0.36,0.38,0.39 0.40,0.41,0.42,0.43), mean=0.358, stddev=0.028], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11400.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-4e-08,-3e-08,-2e-08 -2e-08,-1e-08,-3e-10,1e-08,2e-08 2e-08,2e-08,3e-08,5e-08), mean=-1.24e-09, stddev=1.42e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.68,0.69,0.70 0.70,0.72,0.76,0.81,0.83 0.86,0.87,0.90,0.96), mean=0.767, stddev=0.0506]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3800, learning-rate=0.00512224, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.0425, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.66,0.95,1.1 1.1,1.2,1.2,1.6), mean=0.532, stddev=0.424], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.2,2.3,2.3,2.4 2.4,2.5,2.6,2.8,2.8 2.9,2.9,3.0,3.1), mean=2.62, stddev=0.159], bias-{mean,stddev}=1.117e-08,0.1144, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=3800, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 3e-05,6e-05,0.0005,0.001,0.002 0.003,0.004,0.004,0.05), mean=0.000849, stddev=0.0012], oderiv-count=1.13094e+06
nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/4.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/5.mdl 
LOG (nnet3-show-progress[5.5.1009~1-e4940]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1009~1-e4940]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:4.5393 tdnnf2.linear:2.31466 tdnnf2.affine:3.47032 tdnnf3.linear:2.10733 tdnnf3.affine:3.26114 tdnnf4.linear:1.95668 tdnnf4.affine:3.30942 tdnnf5.linear:1.63202 tdnnf5.affine:3.07759 tdnnf6.linear:1.88662 tdnnf6.affine:3.13848 tdnnf7.linear:1.86141 tdnnf7.affine:3.18995 tdnnf8.linear:1.84772 tdnnf8.affine:3.21009 tdnnf9.linear:1.8036 tdnnf9.affine:3.16434 tdnnf10.linear:1.77677 tdnnf10.affine:3.16067 tdnnf11.linear:1.7618 tdnnf11.affine:3.18653 tdnnf12.linear:1.75048 tdnnf12.affine:3.13974 tdnnf13.linear:1.76028 tdnnf13.affine:3.14027 prefinal-l:2.02076 prefinal-chain.affine:3.17885 prefinal-chain.linear:1.92369 output.affine:3.96645 prefinal-xent.affine:3.07457 prefinal-xent.linear:1.50115 output-xent.affine:5.37357 ]
LOG (nnet3-show-progress[5.5.1009~1-e4940]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:24.6087 tdnnf2.linear:12.4131 tdnnf2.affine:24.6574 tdnnf3.linear:10.4429 tdnnf3.affine:24.4038 tdnnf4.linear:9.58847 tdnnf4.affine:25.3475 tdnnf5.linear:8.46406 tdnnf5.affine:24.521 tdnnf6.linear:9.2567 tdnnf6.affine:24.1932 tdnnf7.linear:9.40812 tdnnf7.affine:25.029 tdnnf8.linear:9.54855 tdnnf8.affine:25.268 tdnnf9.linear:9.74568 tdnnf9.affine:25.0433 tdnnf10.linear:9.93112 tdnnf10.affine:25.1803 tdnnf11.linear:10.2057 tdnnf11.affine:25.5369 tdnnf12.linear:10.4916 tdnnf12.affine:25.2107 tdnnf13.linear:10.8733 tdnnf13.affine:25.1201 prefinal-l:14.6209 prefinal-chain.affine:25.4046 prefinal-chain.linear:13.792 output.affine:20.7966 prefinal-xent.affine:24.413 prefinal-xent.linear:11.4843 output-xent.affine:42.5094 ]
LOG (nnet3-show-progress[5.5.1009~1-e4940]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.168155 tdnnf2.linear:0.192314 tdnnf2.affine:0.127829 tdnnf3.linear:0.204833 tdnnf3.affine:0.120552 tdnnf4.linear:0.204032 tdnnf4.affine:0.117582 tdnnf5.linear:0.18938 tdnnf5.affine:0.11263 tdnnf6.linear:0.203389 tdnnf6.affine:0.116966 tdnnf7.linear:0.198195 tdnnf7.affine:0.114958 tdnnf8.linear:0.194861 tdnnf8.affine:0.114672 tdnnf9.linear:0.187192 tdnnf9.affine:0.114169 tdnnf10.linear:0.181874 tdnnf10.affine:0.113529 tdnnf11.linear:0.176333 tdnnf11.affine:0.112987 tdnnf12.linear:0.171397 tdnnf12.affine:0.112897 tdnnf13.linear:0.167101 tdnnf13.affine:0.113321 prefinal-l:0.143786 prefinal-chain.affine:0.113331 prefinal-chain.linear:0.143579 output.affine:0.211146 prefinal-xent.affine:0.11389 prefinal-xent.linear:0.136046 output-xent.affine:0.13389 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Wed Jun 15 03:42:39 UTC 2022, elapsed time 0 seconds
