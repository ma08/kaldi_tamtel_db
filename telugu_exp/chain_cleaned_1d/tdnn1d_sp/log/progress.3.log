# nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/3.mdl && nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/2.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/3.mdl 
# Started at Wed Jun 15 02:51:42 UTC 2022
#
nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/3.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 3800
prior-dimension: 0
# Nnet info follows.
left-context: 28
right-context: 28
num-parameters: 9533872
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=3800
output-node name=output input=output.affine dim=3800 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=3800
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=3800 output-dim=3800
output-node name=output-xent input=output-xent.log-softmax dim=3800 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.00678, bias-{mean,stddev}=-0.001585,0.01579
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=0.000918254, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.04681, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.59,0.60,0.62 0.64,0.65,0.69,0.72,0.75 0.78,0.84,0.86,1.0), mean=0.692, stddev=0.0535], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.5,1.5,1.6 1.7,1.8,1.8,1.9), mean=1.5, stddev=0.0887], bias-{mean,stddev}=-0.01156,0.6369, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.05e+06, self-repaired-proportion=0.812869, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.05,0.58,0.88 1.2,1.4,1.6,2.5), mean=0.272, stddev=0.402], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.46,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.488, stddev=0.466], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.04,0.07,0.08,0.09 0.09,0.11,0.12,0.16), mean=0.062, stddev=0.0216], oderiv-count=4.54413e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=47672.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.05,0.53,0.82 1.1,1.3,1.5,2.3), mean=0.252, stddev=0.374], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.06,0.10,0.11 0.12,0.13,0.14,0.17), mean=0.0515, stddev=0.0481]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000918254, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.02362, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.1 1.1,1.1,1.1,1.1,1.1 1.1,1.1,1.1,1.1), mean=1.07, stddev=0.00283], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.20,0.21,0.21 0.22,0.23,0.26,0.29,0.31 0.33,0.34,0.36,0.49), mean=0.265, stddev=0.0361], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000918254, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.04312, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.60,0.61,0.63 0.64,0.66,0.69,0.72,0.74 0.75,0.77,0.78,0.93), mean=0.689, stddev=0.0382], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.3,1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.5), mean=1.38, stddev=0.0323], bias-{mean,stddev}=-0.001264,0.6482, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=2.98e+06, self-repaired-proportion=0.0196705, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.03,0.05,0.08 0.12,0.18,0.42,0.77,1.0 1.2,1.4,1.6,2.6), mean=0.499, stddev=0.36], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.06,0.08,0.14 0.19,0.26,0.50,0.73,0.82 0.89,0.92,0.94,0.99), mean=0.499, stddev=0.235], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.003,0.004,0.006,0.007 0.008,0.01,0.01,0.04), mean=0.00433, stddev=0.00305], oderiv-count=4.51525e+06
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=47160.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.05,0.06,0.10 0.14,0.20,0.42,0.74,0.96 1.1,1.3,1.5,2.4), mean=0.49, stddev=0.333], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.20,0.26,0.32 0.39,0.46,0.62,0.76,0.84 0.89,0.99,1.0,1.2), mean=0.616, stddev=0.179]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000918254, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.02056, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.93,0.93,0.93 0.93,0.93,0.93,0.93,0.93 0.93,0.93,0.93,0.93), mean=0.93, stddev=0.002], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.19,0.20 0.21,0.21,0.23,0.25,0.26 0.27,0.28,0.29,0.35), mean=0.232, stddev=0.0205], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000918254, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.04269, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.61,0.61,0.63 0.64,0.65,0.68,0.71,0.72 0.74,0.75,0.76,0.80), mean=0.682, stddev=0.033], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.3,1.3,1.4,1.4,1.4 1.4,1.4,1.4,1.5), mean=1.37, stddev=0.0317], bias-{mean,stddev}=-0.00661,0.6544, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.09e+06, self-repaired-proportion=0.00561751, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.07,0.10,0.15 0.19,0.27,0.52,0.85,1.1 1.3,1.5,1.6,2.4), mean=0.584, stddev=0.352], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.09,0.12,0.18 0.22,0.30,0.50,0.68,0.78 0.82,0.88,0.90,0.97), mean=0.495, stddev=0.202], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.002 0.002,0.002,0.002,0.003,0.004 0.004,0.006,0.006,0.02), mean=0.00265, stddev=0.00127], oderiv-count=4.35154e+06
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=46648.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.08,0.10,0.15 0.20,0.27,0.50,0.81,1.0 1.2,1.4,1.5,2.2), mean=0.567, stddev=0.329], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.34,0.40,0.46 0.53,0.60,0.77,0.93,1.0 1.1,1.1,1.2,1.4), mean=0.77, stddev=0.191]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000918254, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.01942, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.87,0.88,0.88 0.88,0.88,0.88,0.88,0.88 0.88,0.88,0.88,0.88), mean=0.879, stddev=0.00158], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.19 0.20,0.21,0.22,0.23,0.24 0.25,0.26,0.26,0.31), mean=0.219, stddev=0.0172], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000918254, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.04252, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.60,0.61,0.63 0.64,0.65,0.68,0.71,0.72 0.73,0.74,0.75,0.80), mean=0.68, stddev=0.0322], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.3,1.3,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.36, stddev=0.0308], bias-{mean,stddev}=0.007899,0.712, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1e+06, self-repaired-proportion=0.00420948, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.10,0.11,0.16 0.23,0.32,0.58,0.94,1.2 1.4,1.6,1.8,2.8), mean=0.652, stddev=0.39], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.09,0.12,0.18 0.23,0.31,0.50,0.68,0.76 0.83,0.87,0.89,0.96), mean=0.496, stddev=0.198], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.003,0.003,0.004,0.005,0.006 0.007,0.007,0.008,0.02), mean=0.00391, stddev=0.0014], oderiv-count=1.46363e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15549.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.09,0.12,0.17 0.24,0.32,0.56,0.89,1.1 1.3,1.5,1.7,2.6), mean=0.63, stddev=0.364], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.42,0.44,0.51 0.60,0.69,0.86,1.0,1.1 1.2,1.3,1.4,1.6), mean=0.861, stddev=0.208]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000918254, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.02502, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.80,0.80,0.80,0.80 0.80,0.80,0.80,0.80,0.80 0.80,0.80,0.80,0.80), mean=0.801, stddev=0.0015], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.25,0.25 0.26,0.27,0.28,0.30,0.31 0.31,0.32,0.33,0.35), mean=0.282, stddev=0.0185], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000918254, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.05975, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.57,0.59,0.60 0.62,0.64,0.67,0.71,0.73 0.75,0.77,0.78,0.80), mean=0.674, stddev=0.0455], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.9 1.9,1.9,1.9,1.9,2.0 2.0,2.0,2.0,2.0), mean=1.91, stddev=0.0408], bias-{mean,stddev}=-0.001086,0.679, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.01e+06, self-repaired-proportion=0.0126631, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.06,0.08,0.13 0.18,0.25,0.49,0.87,1.1 1.3,1.6,1.7,2.4), mean=0.579, stddev=0.381], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.07,0.10,0.17 0.22,0.29,0.48,0.69,0.77 0.85,0.90,0.94,0.99), mean=0.491, stddev=0.211], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.003,0.003,0.004,0.005,0.006 0.008,0.01,0.01,0.04), mean=0.00429, stddev=0.00233], oderiv-count=1.55227e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15549.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.06,0.08,0.13 0.18,0.25,0.47,0.83,1.0 1.3,1.5,1.6,2.2), mean=0.553, stddev=0.357], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.29,0.34,0.40 0.47,0.55,0.74,0.93,1.0 1.1,1.2,1.2,1.4), mean=0.743, stddev=0.212]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000918254, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01882, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.85,0.85,0.85 0.85,0.85,0.85,0.85,0.85 0.85,0.85,0.86,0.86), mean=0.852, stddev=0.00152], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.19,0.20,0.21,0.22,0.23 0.24,0.24,0.25,0.27), mean=0.212, stddev=0.015], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000918254, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.04256, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.60,0.62,0.63 0.64,0.66,0.68,0.70,0.72 0.73,0.75,0.75,0.77), mean=0.68, stddev=0.0309], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.3,1.3,1.4,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.36, stddev=0.0298], bias-{mean,stddev}=-0.02081,0.6452, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.56e+05, self-repaired-proportion=0.00387535, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.10,0.13,0.19 0.27,0.35,0.60,0.92,1.1 1.3,1.5,1.6,2.6), mean=0.654, stddev=0.351], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.11,0.14,0.19 0.25,0.32,0.48,0.65,0.72 0.77,0.82,0.86,0.96), mean=0.487, stddev=0.178], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.004,0.005 0.006,0.007,0.008,0.01), mean=0.00334, stddev=0.0012], oderiv-count=1.47539e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=15037.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.11,0.13,0.20 0.27,0.35,0.57,0.88,1.1 1.2,1.4,1.5,2.4), mean=0.632, stddev=0.329], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.41,0.46,0.56 0.64,0.72,0.91,1.1,1.2 1.2,1.3,1.4,1.5), mean=0.901, stddev=0.203]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000918254, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01897, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.86,0.86,0.86 0.86,0.86,0.86,0.86,0.86 0.86,0.86,0.86,0.86), mean=0.859, stddev=0.00149], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.20,0.20,0.21,0.23,0.23 0.24,0.25,0.25,0.29), mean=0.214, stddev=0.0153], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000918254, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.04267, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.61,0.62,0.63 0.64,0.65,0.68,0.71,0.72 0.73,0.75,0.76,0.79), mean=0.682, stddev=0.0315], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.3,1.3,1.4,1.4,1.4 1.4,1.4,1.4,1.5), mean=1.37, stddev=0.0314], bias-{mean,stddev}=0.01031,0.6891, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.43e+05, self-repaired-proportion=0.000976562, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.12,0.16,0.20 0.25,0.35,0.60,0.97,1.2 1.4,1.7,1.9,2.5), mean=0.681, stddev=0.385], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.13,0.15,0.19 0.24,0.32,0.49,0.66,0.74 0.79,0.86,0.89,0.96), mean=0.494, stddev=0.186], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.002,0.003,0.004,0.005 0.005,0.007,0.007,0.01), mean=0.00327, stddev=0.00115], oderiv-count=1.40389e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14525.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.14,0.15,0.20 0.25,0.35,0.58,0.93,1.1 1.3,1.6,1.7,2.3), mean=0.656, stddev=0.362], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.46,0.50,0.58 0.63,0.73,0.91,1.1,1.2 1.3,1.4,1.4,1.6), mean=0.917, stddev=0.215]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000918254, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01906, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.86,0.86,0.86 0.86,0.86,0.86,0.86,0.86 0.86,0.87,0.87,0.87), mean=0.862, stddev=0.00127], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.18,0.18,0.19 0.19,0.20,0.21,0.23,0.24 0.24,0.25,0.25,0.30), mean=0.215, stddev=0.0165], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000918254, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.04265, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.61,0.62,0.63 0.64,0.66,0.68,0.71,0.72 0.74,0.75,0.76,0.80), mean=0.682, stddev=0.0313], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.3,1.3,1.4,1.4,1.4 1.4,1.4,1.4,1.5), mean=1.36, stddev=0.0302], bias-{mean,stddev}=-0.019,0.7006, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.76e+05, self-repaired-proportion=0.00037102, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.11,0.12,0.18 0.25,0.36,0.61,0.96,1.2 1.4,1.7,1.9,2.3), mean=0.679, stddev=0.383], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.11,0.13,0.18 0.24,0.32,0.49,0.66,0.73 0.80,0.85,0.86,0.91), mean=0.488, stddev=0.185], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.002,0.003,0.004,0.005 0.006,0.007,0.007,0.01), mean=0.00331, stddev=0.00129], oderiv-count=1.38138e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=14013.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.11,0.13,0.18 0.24,0.35,0.59,0.91,1.1 1.3,1.6,1.8,2.2), mean=0.652, stddev=0.359], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.44,0.46,0.55 0.61,0.72,0.91,1.1,1.2 1.3,1.4,1.4,1.7), mean=0.91, stddev=0.221]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000918254, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01927, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.87,0.87,0.87 0.87,0.87,0.87,0.87,0.87 0.87,0.87,0.87,0.87), mean=0.872, stddev=0.00122], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.19 0.20,0.20,0.22,0.23,0.24 0.25,0.26,0.26,0.31), mean=0.217, stddev=0.0173], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000918254, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.04278, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.61,0.62,0.63 0.64,0.66,0.68,0.71,0.72 0.73,0.75,0.76,0.78), mean=0.684, stddev=0.0308], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.3,1.3,1.4,1.4,1.4 1.4,1.4,1.4,1.5), mean=1.37, stddev=0.0317], bias-{mean,stddev}=-0.00857,0.6844, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.96e+05, self-repaired-proportion=0.000499176, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.11,0.14,0.19 0.25,0.36,0.63,0.96,1.2 1.4,1.6,1.7,2.5), mean=0.681, stddev=0.368], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.12,0.14,0.18 0.24,0.32,0.49,0.65,0.73 0.78,0.84,0.88,0.93), mean=0.491, stddev=0.182], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.002,0.003,0.004,0.005 0.005,0.007,0.008,0.01), mean=0.00326, stddev=0.0012], oderiv-count=1.31542e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=13501.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.11,0.14,0.19 0.25,0.35,0.61,0.92,1.1 1.3,1.5,1.6,2.4), mean=0.657, stddev=0.346], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.43,0.49,0.57 0.63,0.74,0.93,1.1,1.2 1.3,1.4,1.4,1.6), mean=0.92, stddev=0.215]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000918254, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.01945, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,0.88,0.88,0.88 0.88,0.88,0.88,0.88,0.88 0.88,0.88,0.88,0.88), mean=0.88, stddev=0.00129], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.19 0.20,0.21,0.22,0.23,0.24 0.25,0.26,0.26,0.30), mean=0.219, stddev=0.0172], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000918254, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.04284, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.61,0.62,0.64 0.64,0.66,0.68,0.71,0.72 0.74,0.75,0.76,0.79), mean=0.685, stddev=0.0306], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.3,1.3,1.4,1.4,1.4 1.4,1.4,1.4,1.5), mean=1.37, stddev=0.0321], bias-{mean,stddev}=0.04545,0.6874, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.57e+05, self-repaired-proportion=0.000882699, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.17,0.24 0.28,0.37,0.63,1.0,1.2 1.4,1.7,1.8,2.3), mean=0.712, stddev=0.381], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.17,0.22 0.27,0.33,0.50,0.68,0.75 0.80,0.84,0.89,0.95), mean=0.505, stddev=0.181], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.004,0.004 0.005,0.006,0.006,0.008), mean=0.00314, stddev=0.000979], oderiv-count=1.23962e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12989.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.16,0.18,0.24 0.29,0.37,0.61,0.98,1.2 1.3,1.6,1.7,2.2), mean=0.686, stddev=0.356], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.51,0.54,0.60 0.67,0.75,0.93,1.1,1.2 1.3,1.4,1.4,1.6), mean=0.935, stddev=0.207]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000918254, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.0198, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.89,0.89,0.89,0.89 0.89,0.90,0.90,0.90,0.90 0.90,0.90,0.90,0.90), mean=0.896, stddev=0.000946], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.19,0.20 0.20,0.21,0.22,0.24,0.25 0.25,0.26,0.27,0.29), mean=0.223, stddev=0.0172], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000918254, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.04287, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.61,0.62,0.63 0.64,0.66,0.68,0.71,0.73 0.74,0.75,0.76,0.81), mean=0.685, stddev=0.032], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.3,1.3,1.4,1.4,1.4 1.4,1.4,1.4,1.5), mean=1.37, stddev=0.0317], bias-{mean,stddev}=-0.03592,0.7042, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.35e+05, self-repaired-proportion=0.00133346, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.12,0.15,0.21 0.26,0.35,0.63,0.99,1.2 1.4,1.6,1.7,2.3), mean=0.683, stddev=0.371], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.12,0.15,0.20 0.24,0.31,0.49,0.65,0.74 0.79,0.84,0.86,0.95), mean=0.484, stddev=0.183], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.002,0.003,0.004,0.004 0.005,0.006,0.007,0.01), mean=0.00315, stddev=0.00111], oderiv-count=1.20254e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=12477.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.13,0.16,0.22 0.27,0.35,0.61,0.94,1.1 1.3,1.5,1.6,2.2), mean=0.662, stddev=0.347], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.46,0.51,0.59 0.66,0.74,0.94,1.1,1.2 1.3,1.4,1.4,1.6), mean=0.935, stddev=0.214]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000918254, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02013, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.91,0.91,0.91 0.91,0.91,0.91,0.91,0.91 0.91,0.91,0.91,0.91), mean=0.911, stddev=0.00101], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.19,0.20 0.21,0.21,0.23,0.24,0.25 0.26,0.27,0.27,0.33), mean=0.227, stddev=0.0181], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000918254, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.04288, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.61,0.62,0.64 0.65,0.66,0.69,0.71,0.72 0.73,0.75,0.76,0.79), mean=0.685, stddev=0.0307], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.3,1.3,1.4,1.4,1.4 1.4,1.4,1.4,1.5), mean=1.37, stddev=0.0316], bias-{mean,stddev}=-0.01812,0.6847, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.78e+05, self-repaired-proportion=0.00104041, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.15,0.18,0.23 0.28,0.39,0.63,0.98,1.2 1.4,1.7,1.8,2.3), mean=0.704, stddev=0.373], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.14,0.17,0.21 0.26,0.33,0.48,0.64,0.72 0.77,0.83,0.87,0.96), mean=0.487, stddev=0.172], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.002,0.003,0.004,0.004 0.005,0.005,0.006,0.01), mean=0.00298, stddev=0.000933], oderiv-count=1.16965e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11965.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.15,0.19,0.24 0.29,0.39,0.61,0.95,1.1 1.4,1.6,1.7,2.1), mean=0.683, stddev=0.348], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.51,0.55,0.63 0.69,0.78,0.95,1.1,1.2 1.3,1.4,1.5,1.7), mean=0.96, stddev=0.212]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.000918254, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02063, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.93,0.93,0.93 0.93,0.93,0.93,0.93,0.93 0.94,0.94,0.94,0.94), mean=0.934, stddev=0.00101], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.20 0.21,0.22,0.23,0.25,0.26 0.26,0.28,0.28,0.36), mean=0.233, stddev=0.0193], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.000918254, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.04291, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.61,0.62,0.63 0.65,0.66,0.69,0.71,0.73 0.74,0.75,0.76,0.80), mean=0.686, stddev=0.0322], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.3,1.3,1.4,1.4,1.4 1.4,1.4,1.4,1.5), mean=1.37, stddev=0.0326], bias-{mean,stddev}=-0.008612,0.6796, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.21e+05, self-repaired-proportion=5.44621e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.17,0.19,0.25 0.31,0.40,0.66,1.0,1.2 1.4,1.6,1.7,2.2), mean=0.723, stddev=0.364], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.16,0.18,0.22 0.27,0.34,0.48,0.64,0.71 0.77,0.82,0.85,0.91), mean=0.488, stddev=0.167], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.002,0.003,0.003,0.004 0.004,0.004,0.005,0.007), mean=0.00276, stddev=0.000732], oderiv-count=1.10843e+06
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11453.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.18,0.21,0.26 0.32,0.41,0.64,0.98,1.2 1.3,1.5,1.7,2.1), mean=0.706, stddev=0.34], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.55,0.59,0.67 0.73,0.81,0.99,1.2,1.3 1.4,1.4,1.5,1.8), mean=0.998, stddev=0.212]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000918254, l2-regularize=0.008, max-change=0.75, params-rms=0.02747, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.88,0.88,0.88,0.88 0.88,0.88,0.88,0.88,0.88 0.88,0.88,0.88,0.88), mean=0.879, stddev=0.0014], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.39,0.40 0.41,0.42,0.44,0.46,0.47 0.48,0.49,0.49,0.52), mean=0.439, stddev=0.0245], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000918254, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.04321, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.61,0.63,0.64 0.65,0.66,0.69,0.72,0.73 0.74,0.75,0.76,0.78), mean=0.691, stddev=0.0314], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.3 1.3,1.4,1.4,1.4,1.4 1.4,1.5,1.5,1.5), mean=1.38, stddev=0.0314], bias-{mean,stddev}=-0.008508,0.692, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.51e+05, self-repaired-proportion=0.00340764, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.09,0.11,0.16 0.24,0.33,0.59,0.94,1.2 1.4,1.7,1.8,2.3), mean=0.658, stddev=0.381], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.10,0.13,0.17 0.23,0.31,0.46,0.64,0.72 0.80,0.85,0.89,0.94), mean=0.475, stddev=0.186], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.003,0.003,0.005,0.005 0.006,0.007,0.008,0.02), mean=0.00361, stddev=0.00139], oderiv-count=1.10118e+06
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11453.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.10,0.13,0.18 0.25,0.35,0.59,0.92,1.1 1.3,1.6,1.7,2.1), mean=0.653, stddev=0.358], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.41,0.48,0.56 0.65,0.76,0.97,1.2,1.3 1.3,1.4,1.5,2.0), mean=0.964, stddev=0.237]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000918254, l2-regularize=0.008, max-change=0.75, params-rms=0.02668, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.85,0.85,0.85 0.85,0.85,0.85,0.86,0.86 0.86,0.86,0.86,0.86), mean=0.854, stddev=0.00154], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.36,0.37,0.38 0.39,0.40,0.43,0.45,0.46 0.47,0.49,0.49,0.54), mean=0.426, stddev=0.0288], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11453.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5e-08,-5e-08,-4e-08,-3e-08 -3e-08,-2e-08,4e-09,2e-08,3e-08 4e-08,4e-08,5e-08,7e-08), mean=1.98e-09, stddev=2.08e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.1 1.1,1.2,1.2,1.3,1.3 1.4,1.4,1.4,1.4), mean=1.23, stddev=0.074]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3800, learning-rate=0.000918254, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.0169, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-10,3e-10,3e-10,4e-10 0.009,0.02,0.23,0.39,0.43 0.45,0.47,0.49,0.53), mean=0.216, stddev=0.163], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.76,0.81,0.88 0.92,0.96,1.0,1.1,1.2 1.2,1.2,1.2,1.3), mean=1.04, stddev=0.0981], bias-{mean,stddev}=0.0004135,0.07106, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.000918254, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.04155, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.58,0.60,0.61 0.62,0.64,0.66,0.69,0.71 0.72,0.73,0.74,0.76), mean=0.664, stddev=0.0333], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.3,1.3,1.3 1.3,1.3,1.3,1.4,1.4 1.4,1.4,1.4,1.5), mean=1.33, stddev=0.0312], bias-{mean,stddev}=0.002049,0.6692, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.61e+05, self-repaired-proportion=0.0121464, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.08,0.12,0.19 0.23,0.32,0.53,0.85,1.1 1.3,1.6,1.7,2.5), mean=0.61, stddev=0.354], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.09,0.13,0.19 0.24,0.32,0.49,0.68,0.78 0.84,0.88,0.91,0.99), mean=0.498, stddev=0.198], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.001,0.001,0.001 0.001,0.001,0.002,0.002,0.003 0.003,0.003,0.004,0.03), mean=0.0021, stddev=0.00219], oderiv-count=1.11955e+06
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=11453.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.09,0.13,0.19 0.24,0.32,0.52,0.82,1.1 1.2,1.5,1.6,2.3), mean=0.592, stddev=0.331], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.38,0.46,0.52 0.58,0.65,0.78,0.94,1.0 1.1,1.2,1.3,1.7), mean=0.793, stddev=0.189]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.000918254, l2-regularize=0.008, max-change=0.75, params-rms=0.02168, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.69,0.69,0.69 0.69,0.69,0.69,0.69,0.69 0.69,0.69,0.69,0.70), mean=0.694, stddev=0.000622], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.27,0.28,0.30 0.31,0.32,0.35,0.37,0.38 0.39,0.40,0.40,0.42), mean=0.346, stddev=0.0286], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=11453.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6e-08,-4e-08,-3e-08,-3e-08 -2e-08,-1e-08,-5e-10,1e-08,2e-08 3e-08,3e-08,4e-08,4e-08), mean=-2.58e-10, stddev=1.52e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.62,0.63,0.64 0.65,0.67,0.71,0.77,0.79 0.82,0.83,0.86,0.91), mean=0.72, stddev=0.0567]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3800, learning-rate=0.00459127, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.03777, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.48,0.86,0.97 1.0,1.1,1.1,1.5), mean=0.458, stddev=0.394], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.9,1.9,2.0 2.1,2.1,2.3,2.5,2.6 2.7,2.7,2.8,2.8), mean=2.32, stddev=0.203], bias-{mean,stddev}=4.91e-08,0.1132, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=3800, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,6e-05,0.0005,0.001,0.002 0.003,0.004,0.004,0.05), mean=0.000826, stddev=0.0012], oderiv-count=1.1053e+06
nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/2.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/3.mdl 
LOG (nnet3-show-progress[5.5.1009~1-e4940]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1009~1-e4940]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:5.59646 tdnnf2.linear:2.8205 tdnnf2.affine:4.69459 tdnnf3.linear:2.59905 tdnnf3.affine:4.3923 tdnnf4.linear:2.40489 tdnnf4.affine:4.4724 tdnnf5.linear:2.05899 tdnnf5.affine:4.24501 tdnnf6.linear:2.33164 tdnnf6.affine:4.24635 tdnnf7.linear:2.30821 tdnnf7.affine:4.33832 tdnnf8.linear:2.28741 tdnnf8.affine:4.37578 tdnnf9.linear:2.25752 tdnnf9.affine:4.3308 tdnnf10.linear:2.25683 tdnnf10.affine:4.33609 tdnnf11.linear:2.26096 tdnnf11.affine:4.39218 tdnnf12.linear:2.2979 tdnnf12.affine:4.33571 tdnnf13.linear:2.34371 tdnnf13.affine:4.32274 prefinal-l:2.56104 prefinal-chain.affine:4.33348 prefinal-chain.linear:2.1344 output.affine:4.81068 prefinal-xent.affine:4.29309 prefinal-xent.linear:1.91124 output-xent.affine:8.219 ]
LOG (nnet3-show-progress[5.5.1009~1-e4940]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:30.1512 tdnnf2.linear:12.0916 tdnnf2.affine:30.2934 tdnnf3.linear:10.5267 tdnnf3.affine:30.2714 tdnnf4.linear:9.94263 tdnnf4.affine:31.5144 tdnnf5.linear:9.05789 tdnnf5.affine:30.6606 tdnnf6.linear:9.63376 tdnnf6.affine:30.0278 tdnnf7.linear:9.71444 tdnnf7.affine:31.0426 tdnnf8.linear:9.75801 tdnnf8.affine:31.304 tdnnf9.linear:9.86735 tdnnf9.affine:30.9744 tdnnf10.linear:9.96067 tdnnf10.affine:31.0954 tdnnf11.linear:10.1371 tdnnf11.affine:31.4778 tdnnf12.linear:10.3059 tdnnf12.affine:31.022 tdnnf13.linear:10.5648 tdnnf13.affine:30.9141 prefinal-l:14.0652 prefinal-chain.affine:31.3028 prefinal-chain.linear:13.6587 output.affine:17.2368 prefinal-xent.affine:30.1858 prefinal-xent.linear:11.1005 output-xent.affine:37.9033 ]
LOG (nnet3-show-progress[5.5.1009~1-e4940]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.164006 tdnnf2.linear:0.236471 tdnnf2.affine:0.137268 tdnnf3.linear:0.242961 tdnnf3.affine:0.12846 tdnnf4.linear:0.233769 tdnnf4.affine:0.125646 tdnnf5.linear:0.215049 tdnnf5.affine:0.122309 tdnnf6.linear:0.232412 tdnnf6.affine:0.125245 tdnnf7.linear:0.229659 tdnnf7.affine:0.123854 tdnnf8.linear:0.227695 tdnnf8.affine:0.123908 tdnnf9.linear:0.223723 tdnnf9.affine:0.124009 tdnnf10.linear:0.223267 tdnnf10.affine:0.123739 tdnnf11.linear:0.221496 tdnnf11.affine:0.123901 tdnnf12.linear:0.22362 tdnnf12.affine:0.124189 tdnnf13.linear:0.225285 tdnnf13.affine:0.124255 prefinal-l:0.185057 prefinal-chain.affine:0.123025 prefinal-chain.linear:0.153932 output.affine:0.325908 prefinal-xent.affine:0.125928 prefinal-xent.linear:0.169276 output-xent.affine:0.244949 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Wed Jun 15 02:51:43 UTC 2022, elapsed time 1 seconds
