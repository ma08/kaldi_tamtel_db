# nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/1.mdl && nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/0.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/1.mdl 
# Started at Wed Jun 15 02:12:11 UTC 2022
#
nnet3-am-info telugu_exp/chain_cleaned_1d/tdnn1d_sp/1.mdl 
input-dim: 40
ivector-dim: 100
num-pdfs: 3800
prior-dimension: 0
# Nnet info follows.
left-context: 28
right-context: 28
num-parameters: 9533872
modulus: 1
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -1), input, Offset(input, 1), ReplaceIndex(ivector, t, 0)) input-dim=220 output-dim=220
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=220 output-dim=1024
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=1024 output-dim=1024
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=1024 output-dim=1024
component-node name=tdnn1.dropout component=tdnn1.dropout input=tdnn1.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.linear component=tdnnf2.linear input=tdnn1.dropout input-dim=1024 output-dim=128
component-node name=tdnnf2.affine component=tdnnf2.affine input=tdnnf2.linear input-dim=128 output-dim=1024
component-node name=tdnnf2.relu component=tdnnf2.relu input=tdnnf2.affine input-dim=1024 output-dim=1024
component-node name=tdnnf2.batchnorm component=tdnnf2.batchnorm input=tdnnf2.relu input-dim=1024 output-dim=1024
component-node name=tdnnf2.dropout component=tdnnf2.dropout input=tdnnf2.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf2.noop component=tdnnf2.noop input=Sum(Scale(0.66, tdnn1.dropout), tdnnf2.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf3.linear component=tdnnf3.linear input=tdnnf2.noop input-dim=1024 output-dim=128
component-node name=tdnnf3.affine component=tdnnf3.affine input=tdnnf3.linear input-dim=128 output-dim=1024
component-node name=tdnnf3.relu component=tdnnf3.relu input=tdnnf3.affine input-dim=1024 output-dim=1024
component-node name=tdnnf3.batchnorm component=tdnnf3.batchnorm input=tdnnf3.relu input-dim=1024 output-dim=1024
component-node name=tdnnf3.dropout component=tdnnf3.dropout input=tdnnf3.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf3.noop component=tdnnf3.noop input=Sum(Scale(0.66, tdnnf2.noop), tdnnf3.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf4.linear component=tdnnf4.linear input=tdnnf3.noop input-dim=1024 output-dim=128
component-node name=tdnnf4.affine component=tdnnf4.affine input=tdnnf4.linear input-dim=128 output-dim=1024
component-node name=tdnnf4.relu component=tdnnf4.relu input=tdnnf4.affine input-dim=1024 output-dim=1024
component-node name=tdnnf4.batchnorm component=tdnnf4.batchnorm input=tdnnf4.relu input-dim=1024 output-dim=1024
component-node name=tdnnf4.dropout component=tdnnf4.dropout input=tdnnf4.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf4.noop component=tdnnf4.noop input=Sum(Scale(0.66, tdnnf3.noop), tdnnf4.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf5.linear component=tdnnf5.linear input=tdnnf4.noop input-dim=1024 output-dim=128
component-node name=tdnnf5.affine component=tdnnf5.affine input=tdnnf5.linear input-dim=128 output-dim=1024
component-node name=tdnnf5.relu component=tdnnf5.relu input=tdnnf5.affine input-dim=1024 output-dim=1024
component-node name=tdnnf5.batchnorm component=tdnnf5.batchnorm input=tdnnf5.relu input-dim=1024 output-dim=1024
component-node name=tdnnf5.dropout component=tdnnf5.dropout input=tdnnf5.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf5.noop component=tdnnf5.noop input=Sum(Scale(0.66, tdnnf4.noop), tdnnf5.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf6.linear component=tdnnf6.linear input=tdnnf5.noop input-dim=1024 output-dim=128
component-node name=tdnnf6.affine component=tdnnf6.affine input=tdnnf6.linear input-dim=128 output-dim=1024
component-node name=tdnnf6.relu component=tdnnf6.relu input=tdnnf6.affine input-dim=1024 output-dim=1024
component-node name=tdnnf6.batchnorm component=tdnnf6.batchnorm input=tdnnf6.relu input-dim=1024 output-dim=1024
component-node name=tdnnf6.dropout component=tdnnf6.dropout input=tdnnf6.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf6.noop component=tdnnf6.noop input=Sum(Scale(0.66, tdnnf5.noop), tdnnf6.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf7.linear component=tdnnf7.linear input=tdnnf6.noop input-dim=1024 output-dim=128
component-node name=tdnnf7.affine component=tdnnf7.affine input=tdnnf7.linear input-dim=128 output-dim=1024
component-node name=tdnnf7.relu component=tdnnf7.relu input=tdnnf7.affine input-dim=1024 output-dim=1024
component-node name=tdnnf7.batchnorm component=tdnnf7.batchnorm input=tdnnf7.relu input-dim=1024 output-dim=1024
component-node name=tdnnf7.dropout component=tdnnf7.dropout input=tdnnf7.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf7.noop component=tdnnf7.noop input=Sum(Scale(0.66, tdnnf6.noop), tdnnf7.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf8.linear component=tdnnf8.linear input=tdnnf7.noop input-dim=1024 output-dim=128
component-node name=tdnnf8.affine component=tdnnf8.affine input=tdnnf8.linear input-dim=128 output-dim=1024
component-node name=tdnnf8.relu component=tdnnf8.relu input=tdnnf8.affine input-dim=1024 output-dim=1024
component-node name=tdnnf8.batchnorm component=tdnnf8.batchnorm input=tdnnf8.relu input-dim=1024 output-dim=1024
component-node name=tdnnf8.dropout component=tdnnf8.dropout input=tdnnf8.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf8.noop component=tdnnf8.noop input=Sum(Scale(0.66, tdnnf7.noop), tdnnf8.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf9.linear component=tdnnf9.linear input=tdnnf8.noop input-dim=1024 output-dim=128
component-node name=tdnnf9.affine component=tdnnf9.affine input=tdnnf9.linear input-dim=128 output-dim=1024
component-node name=tdnnf9.relu component=tdnnf9.relu input=tdnnf9.affine input-dim=1024 output-dim=1024
component-node name=tdnnf9.batchnorm component=tdnnf9.batchnorm input=tdnnf9.relu input-dim=1024 output-dim=1024
component-node name=tdnnf9.dropout component=tdnnf9.dropout input=tdnnf9.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf9.noop component=tdnnf9.noop input=Sum(Scale(0.66, tdnnf8.noop), tdnnf9.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf10.linear component=tdnnf10.linear input=tdnnf9.noop input-dim=1024 output-dim=128
component-node name=tdnnf10.affine component=tdnnf10.affine input=tdnnf10.linear input-dim=128 output-dim=1024
component-node name=tdnnf10.relu component=tdnnf10.relu input=tdnnf10.affine input-dim=1024 output-dim=1024
component-node name=tdnnf10.batchnorm component=tdnnf10.batchnorm input=tdnnf10.relu input-dim=1024 output-dim=1024
component-node name=tdnnf10.dropout component=tdnnf10.dropout input=tdnnf10.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf10.noop component=tdnnf10.noop input=Sum(Scale(0.66, tdnnf9.noop), tdnnf10.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf11.linear component=tdnnf11.linear input=tdnnf10.noop input-dim=1024 output-dim=128
component-node name=tdnnf11.affine component=tdnnf11.affine input=tdnnf11.linear input-dim=128 output-dim=1024
component-node name=tdnnf11.relu component=tdnnf11.relu input=tdnnf11.affine input-dim=1024 output-dim=1024
component-node name=tdnnf11.batchnorm component=tdnnf11.batchnorm input=tdnnf11.relu input-dim=1024 output-dim=1024
component-node name=tdnnf11.dropout component=tdnnf11.dropout input=tdnnf11.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf11.noop component=tdnnf11.noop input=Sum(Scale(0.66, tdnnf10.noop), tdnnf11.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf12.linear component=tdnnf12.linear input=tdnnf11.noop input-dim=1024 output-dim=128
component-node name=tdnnf12.affine component=tdnnf12.affine input=tdnnf12.linear input-dim=128 output-dim=1024
component-node name=tdnnf12.relu component=tdnnf12.relu input=tdnnf12.affine input-dim=1024 output-dim=1024
component-node name=tdnnf12.batchnorm component=tdnnf12.batchnorm input=tdnnf12.relu input-dim=1024 output-dim=1024
component-node name=tdnnf12.dropout component=tdnnf12.dropout input=tdnnf12.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf12.noop component=tdnnf12.noop input=Sum(Scale(0.66, tdnnf11.noop), tdnnf12.dropout) input-dim=1024 output-dim=1024
component-node name=tdnnf13.linear component=tdnnf13.linear input=tdnnf12.noop input-dim=1024 output-dim=128
component-node name=tdnnf13.affine component=tdnnf13.affine input=tdnnf13.linear input-dim=128 output-dim=1024
component-node name=tdnnf13.relu component=tdnnf13.relu input=tdnnf13.affine input-dim=1024 output-dim=1024
component-node name=tdnnf13.batchnorm component=tdnnf13.batchnorm input=tdnnf13.relu input-dim=1024 output-dim=1024
component-node name=tdnnf13.dropout component=tdnnf13.dropout input=tdnnf13.batchnorm input-dim=1024 output-dim=1024
component-node name=tdnnf13.noop component=tdnnf13.noop input=Sum(Scale(0.66, tdnnf12.noop), tdnnf13.dropout) input-dim=1024 output-dim=1024
component-node name=prefinal-l component=prefinal-l input=tdnnf13.noop input-dim=1024 output-dim=256
component-node name=prefinal-chain.affine component=prefinal-chain.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-chain.relu component=prefinal-chain.relu input=prefinal-chain.affine input-dim=1024 output-dim=1024
component-node name=prefinal-chain.batchnorm1 component=prefinal-chain.batchnorm1 input=prefinal-chain.relu input-dim=1024 output-dim=1024
component-node name=prefinal-chain.linear component=prefinal-chain.linear input=prefinal-chain.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-chain.batchnorm2 component=prefinal-chain.batchnorm2 input=prefinal-chain.linear input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=prefinal-chain.batchnorm2 input-dim=256 output-dim=3800
output-node name=output input=output.affine dim=3800 objective=linear
component-node name=prefinal-xent.affine component=prefinal-xent.affine input=prefinal-l input-dim=256 output-dim=1024
component-node name=prefinal-xent.relu component=prefinal-xent.relu input=prefinal-xent.affine input-dim=1024 output-dim=1024
component-node name=prefinal-xent.batchnorm1 component=prefinal-xent.batchnorm1 input=prefinal-xent.relu input-dim=1024 output-dim=1024
component-node name=prefinal-xent.linear component=prefinal-xent.linear input=prefinal-xent.batchnorm1 input-dim=1024 output-dim=256
component-node name=prefinal-xent.batchnorm2 component=prefinal-xent.batchnorm2 input=prefinal-xent.linear input-dim=256 output-dim=256
component-node name=output-xent.affine component=output-xent.affine input=prefinal-xent.batchnorm2 input-dim=256 output-dim=3800
component-node name=output-xent.log-softmax component=output-xent.log-softmax input=output-xent.affine input-dim=3800 output-dim=3800
output-node name=output-xent input=output-xent.log-softmax dim=3800 objective=linear
component name=lda type=FixedAffineComponent, input-dim=220, output-dim=220, linear-params-rms=0.00678, bias-{mean,stddev}=-0.001585,0.01579
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=220, output-dim=1024, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.05888, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.77,0.78,0.80 0.82,0.84,0.87,0.91,0.93 0.95,0.97,0.98,1.0), mean=0.872, stddev=0.0448], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.8,1.8,1.8,1.8 1.8,1.8,1.9,1.9,2.0 2.0,2.0,2.1,2.1), mean=1.88, stddev=0.0576], bias-{mean,stddev}=-0.01712,0.8508, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.22e+06, self-repaired-proportion=0.837629, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.04,0.78,1.2 1.5,1.9,2.1,3.2), mean=0.365, stddev=0.535], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.43,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.488, stddev=0.47], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.04,0.07,0.11,0.12 0.12,0.13,0.13,0.14), mean=0.0773, stddev=0.0363], oderiv-count=4.68918e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=24036, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.05,0.72,1.1 1.4,1.7,1.9,3.0), mean=0.338, stddev=0.496], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.07,0.11,0.13 0.14,0.16,0.17,0.23), mean=0.0592, stddev=0.0565]
component name=tdnn1.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf2.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.02427, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.1 1.1,1.1,1.1,1.1,1.1 1.1,1.1,1.1,1.1), mean=1.1, stddev=0.000846], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.21,0.22,0.22 0.23,0.24,0.27,0.30,0.31 0.33,0.34,0.35,0.42), mean=0.273, stddev=0.0322], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.05483, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.79,0.80,0.81 0.82,0.84,0.88,0.91,0.93 0.94,0.96,0.97,1.0), mean=0.876, stddev=0.0401], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.7,1.7,1.7 1.7,1.7,1.8,1.8,1.8 1.8,1.8,1.8,1.9), mean=1.75, stddev=0.038], bias-{mean,stddev}=0.004915,0.8429, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf2.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3.05e+06, self-repaired-proportion=0.100043, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.009,0.02,0.05 0.08,0.14,0.44,0.92,1.2 1.5,1.8,2.2,3.6), mean=0.563, stddev=0.492], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.02,0.04,0.08 0.13,0.21,0.50,0.77,0.87 0.93,0.97,0.98,1.0), mean=0.499, stddev=0.272], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.003,0.003,0.004,0.008,0.01 0.02,0.03,0.04,0.07), mean=0.00671, stddev=0.00761], oderiv-count=4.63562e+06
component name=tdnnf2.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=23780, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.02,0.04,0.07 0.11,0.18,0.46,0.89,1.2 1.4,1.7,2.1,3.3), mean=0.566, stddev=0.449], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.12,0.20,0.26 0.34,0.45,0.66,0.86,0.95 1.0,1.1,1.2,1.5), mean=0.659, stddev=0.241]
component name=tdnnf2.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf2.noop type=NoOpComponent, dim=1024
component name=tdnnf3.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.0223, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.0,1.0 1.0,1.0,1.0,1.0,1.0 1.0,1.0,1.0,1.0), mean=1.01, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.21,0.22,0.22 0.23,0.24,0.25,0.27,0.28 0.28,0.29,0.30,0.34), mean=0.252, stddev=0.0188], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.05464, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.79,0.80,0.81 0.82,0.84,0.87,0.91,0.92 0.94,0.96,0.97,1.0), mean=0.873, stddev=0.0397], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.7,1.7,1.7 1.7,1.7,1.7,1.8,1.8 1.8,1.8,1.8,1.9), mean=1.75, stddev=0.0399], bias-{mean,stddev}=-0.006246,0.8428, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf3.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=3e+06, self-repaired-proportion=0.022259, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.05,0.09,0.14 0.19,0.29,0.60,1.0,1.3 1.6,1.8,2.0,3.3), mean=0.696, stddev=0.465], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.07,0.10,0.15 0.20,0.28,0.50,0.70,0.79 0.85,0.90,0.93,0.98), mean=0.496, stddev=0.219], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.002 0.002,0.002,0.002,0.004,0.005 0.006,0.007,0.01,0.04), mean=0.003, stddev=0.00212], oderiv-count=4.43837e+06
component name=tdnnf3.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=23524, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.08,0.11,0.17 0.22,0.32,0.60,1.0,1.3 1.5,1.7,1.9,3.0), mean=0.693, stddev=0.429], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.33,0.42,0.51 0.59,0.70,0.93,1.1,1.2 1.3,1.4,1.5,1.9), mean=0.919, stddev=0.255]
component name=tdnnf3.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf3.noop type=NoOpComponent, dim=1024
component name=tdnnf4.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-1,0, linear-params-rms=0.02171, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,0.98,0.98,0.98 0.98,0.98,0.98,0.98,0.98 0.98,0.98,0.98,0.99), mean=0.983, stddev=0.0012], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.21,0.22 0.22,0.23,0.24,0.26,0.27 0.27,0.28,0.29,0.35), mean=0.245, stddev=0.0178], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, time-offsets=0,1, linear-params-rms=0.0545, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.76,0.78,0.79,0.81 0.82,0.84,0.87,0.90,0.92 0.93,0.95,0.97,1.0), mean=0.871, stddev=0.0394], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.7,1.7 1.7,1.7,1.7,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.74, stddev=0.0386], bias-{mean,stddev}=0.01124,0.9146, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf4.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.05e+06, self-repaired-proportion=0.0140199, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.07,0.09,0.15 0.24,0.35,0.69,1.2,1.5 1.8,2.1,2.3,3.7), mean=0.795, stddev=0.516], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.08,0.09,0.15 0.21,0.30,0.50,0.70,0.78 0.84,0.89,0.91,0.98), mean=0.498, stddev=0.211], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.003,0.003,0.004,0.005,0.006 0.008,0.01,0.01,0.02), mean=0.00421, stddev=0.00201], oderiv-count=1.50419e+06
component name=tdnnf4.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=7841.34, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.10,0.12,0.19 0.27,0.38,0.70,1.1,1.4 1.7,1.9,2.2,3.4), mean=0.787, stddev=0.476], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.43,0.45,0.58 0.68,0.82,1.1,1.3,1.4 1.5,1.7,1.8,2.0), mean=1.06, stddev=0.288]
component name=tdnnf4.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf4.noop type=NoOpComponent, dim=1024
component name=tdnnf5.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=0, linear-params-rms=0.02908, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.93,0.93,0.93 0.93,0.93,0.93,0.93,0.93 0.93,0.93,0.93,0.93), mean=0.931, stddev=0.000423], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.28,0.29,0.29 0.30,0.31,0.33,0.35,0.36 0.36,0.37,0.38,0.41), mean=0.328, stddev=0.0216], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, time-offsets=0, linear-params-rms=0.07691, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.74,0.75,0.78 0.80,0.82,0.86,0.92,0.94 0.97,0.99,1.0,1.0), mean=0.868, stddev=0.057], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2.3,2.3,2.4,2.4 2.4,2.4,2.5,2.5,2.5 2.6,2.6,2.6,2.6), mean=2.46, stddev=0.053], bias-{mean,stddev}=-0.000639,0.8743, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf5.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.81e+05, self-repaired-proportion=0.0226067, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.06,0.08,0.13 0.20,0.30,0.62,1.1,1.4 1.7,2.1,2.2,3.1), mean=0.726, stddev=0.501], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.07,0.09,0.15 0.21,0.28,0.49,0.71,0.79 0.85,0.91,0.94,0.99), mean=0.493, stddev=0.218], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.003,0.003,0.004,0.005,0.006 0.008,0.01,0.01,0.04), mean=0.00432, stddev=0.00271], oderiv-count=1.57456e+06
component name=tdnnf5.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=7841.34, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.06,0.08,0.15 0.21,0.30,0.59,1.1,1.3 1.6,2.0,2.1,2.9), mean=0.702, stddev=0.465], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.29,0.35,0.46 0.56,0.68,0.93,1.2,1.3 1.4,1.5,1.6,1.9), mean=0.93, stddev=0.291]
component name=tdnnf5.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf5.noop type=NoOpComponent, dim=1024
component name=tdnnf6.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02128, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.96,0.96,0.96 0.96,0.96,0.96,0.96,0.96 0.96,0.96,0.96,0.96), mean=0.963, stddev=0], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.20,0.21 0.22,0.23,0.24,0.25,0.26 0.27,0.27,0.28,0.32), mean=0.24, stddev=0.0164], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05452, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.77,0.79,0.81 0.82,0.84,0.87,0.90,0.92 0.94,0.95,0.96,0.98), mean=0.871, stddev=0.0389], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.8,1.8 1.8,1.8,1.8,1.9), mean=1.74, stddev=0.0377], bias-{mean,stddev}=-0.0247,0.8288, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf6.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=1.01e+06, self-repaired-proportion=0.0109194, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.09,0.12,0.21 0.27,0.39,0.71,1.1,1.4 1.6,1.9,2.0,3.4), mean=0.78, stddev=0.458], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.09,0.11,0.18 0.24,0.31,0.49,0.67,0.75 0.80,0.85,0.89,0.97), mean=0.49, stddev=0.193], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.003,0.003,0.004,0.005 0.006,0.007,0.009,0.02), mean=0.00351, stddev=0.00151], oderiv-count=1.4672e+06
component name=tdnnf6.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=7585.34, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.11,0.13,0.22 0.30,0.42,0.71,1.1,1.3 1.6,1.8,2.0,3.2), mean=0.776, stddev=0.426], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.45,0.52,0.62 0.72,0.85,1.1,1.3,1.4 1.5,1.6,1.7,1.9), mean=1.08, stddev=0.272]
component name=tdnnf6.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf6.noop type=NoOpComponent, dim=1024
component name=tdnnf7.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02124, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.96,0.96,0.96 0.96,0.96,0.96,0.96,0.96 0.96,0.96,0.96,0.96), mean=0.961, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.20,0.20,0.21 0.22,0.23,0.24,0.25,0.26 0.27,0.27,0.28,0.31), mean=0.24, stddev=0.0167], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05457, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.78,0.79,0.81 0.82,0.84,0.87,0.90,0.92 0.94,0.96,0.97,1.0), mean=0.872, stddev=0.0396], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.7,1.7,1.7 1.7,1.7,1.7,1.8,1.8 1.8,1.8,1.8,1.9), mean=1.75, stddev=0.0385], bias-{mean,stddev}=0.01543,0.8841, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf7.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.11e+05, self-repaired-proportion=0.0105743, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.11,0.16,0.21 0.27,0.38,0.71,1.2,1.5 1.8,2.2,2.4,3.3), mean=0.817, stddev=0.503], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.10,0.13,0.18 0.22,0.31,0.49,0.69,0.77 0.83,0.88,0.92,0.98), mean=0.498, stddev=0.202], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.002,0.003,0.004,0.005 0.006,0.007,0.008,0.01), mean=0.00338, stddev=0.00135], oderiv-count=1.37949e+06
component name=tdnnf7.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=7329.34, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.14,0.17,0.22 0.30,0.42,0.72,1.2,1.4 1.7,2.0,2.3,3.0), mean=0.814, stddev=0.467], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.48,0.56,0.67 0.74,0.87,1.1,1.4,1.5 1.6,1.7,1.8,2.1), mean=1.12, stddev=0.288]
component name=tdnnf7.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf7.noop type=NoOpComponent, dim=1024
component name=tdnnf8.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02114, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.96,0.96,0.96 0.96,0.96,0.96,0.96,0.96 0.96,0.96,0.96,0.96), mean=0.957, stddev=0.000345], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.20,0.20,0.21 0.22,0.22,0.24,0.25,0.26 0.27,0.27,0.28,0.32), mean=0.239, stddev=0.0173], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05452, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.78,0.79,0.81 0.82,0.84,0.87,0.90,0.92 0.94,0.96,0.97,1.0), mean=0.871, stddev=0.0396], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.7,1.7,1.7,1.7 1.7,1.7,1.7,1.8,1.8 1.8,1.8,1.9,1.9), mean=1.74, stddev=0.0378], bias-{mean,stddev}=-0.02246,0.8989, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf8.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.17e+05, self-repaired-proportion=0.00657059, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.11,0.13,0.18 0.27,0.39,0.73,1.2,1.5 1.8,2.2,2.4,3.0), mean=0.817, stddev=0.499], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.09,0.11,0.16 0.21,0.30,0.49,0.68,0.76 0.82,0.87,0.89,0.92), mean=0.49, stddev=0.201], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.002,0.003,0.004,0.005 0.006,0.008,0.009,0.02), mean=0.00337, stddev=0.00155], oderiv-count=1.38115e+06
component name=tdnnf8.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=7073.34, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.13,0.14,0.21 0.29,0.42,0.73,1.1,1.4 1.7,2.1,2.2,2.8), mean=0.813, stddev=0.466], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.46,0.51,0.63 0.72,0.85,1.1,1.4,1.5 1.6,1.8,1.8,2.2), mean=1.12, stddev=0.302]
component name=tdnnf8.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf8.noop type=NoOpComponent, dim=1024
component name=tdnnf9.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02112, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.95,0.95,0.95 0.95,0.95,0.96,0.96,0.96 0.96,0.96,0.96,0.96), mean=0.956, stddev=0.0016], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.21 0.22,0.22,0.24,0.25,0.26 0.27,0.28,0.28,0.32), mean=0.238, stddev=0.0176], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05458, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.78,0.79,0.81 0.82,0.84,0.87,0.90,0.92 0.94,0.95,0.96,1.0), mean=0.872, stddev=0.0392], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.7,1.7,1.7 1.7,1.7,1.7,1.8,1.8 1.8,1.8,1.8,1.9), mean=1.75, stddev=0.0395], bias-{mean,stddev}=-0.00958,0.8782, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf9.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=9.43e+05, self-repaired-proportion=0.00894995, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.11,0.13,0.19 0.26,0.40,0.74,1.2,1.5 1.7,2.0,2.2,3.3), mean=0.821, stddev=0.484], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.10,0.12,0.16 0.22,0.31,0.50,0.67,0.75 0.81,0.86,0.90,0.95), mean=0.493, stddev=0.197], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.002,0.003,0.004,0.005 0.006,0.008,0.009,0.01), mean=0.00335, stddev=0.00142], oderiv-count=1.3225e+06
component name=tdnnf9.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=6817.34, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.13,0.16,0.22 0.29,0.43,0.75,1.2,1.4 1.6,1.9,2.1,3.0), mean=0.815, stddev=0.448], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.45,0.54,0.63 0.74,0.87,1.1,1.4,1.5 1.6,1.7,1.8,2.0), mean=1.12, stddev=0.293]
component name=tdnnf9.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf9.noop type=NoOpComponent, dim=1024
component name=tdnnf10.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02105, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.95,0.95,0.95 0.95,0.95,0.95,0.95,0.95 0.95,0.95,0.95,0.95), mean=0.953, stddev=0.000646], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.21 0.22,0.22,0.24,0.25,0.26 0.27,0.27,0.28,0.30), mean=0.238, stddev=0.0173], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05455, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.79,0.80,0.81 0.82,0.84,0.87,0.90,0.92 0.94,0.95,0.97,1.0), mean=0.872, stddev=0.0387], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.7,1.7,1.7 1.7,1.7,1.7,1.8,1.8 1.8,1.8,1.8,1.9), mean=1.75, stddev=0.0385], bias-{mean,stddev}=0.05916,0.8823, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf10.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=8.71e+05, self-repaired-proportion=0.0089829, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.14,0.16,0.23 0.30,0.41,0.76,1.3,1.5 1.8,2.2,2.4,3.0), mean=0.858, stddev=0.503], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.14,0.19 0.25,0.32,0.51,0.69,0.78 0.83,0.88,0.91,0.97), mean=0.508, stddev=0.197], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.002,0.003,0.004,0.005 0.006,0.007,0.008,0.01), mean=0.00327, stddev=0.00129], oderiv-count=1.28928e+06
component name=tdnnf10.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=6561.34, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.15,0.18,0.26 0.32,0.42,0.75,1.2,1.5 1.7,2.1,2.2,2.8), mean=0.845, stddev=0.465], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.53,0.57,0.67 0.75,0.88,1.1,1.4,1.5 1.6,1.8,1.8,2.0), mean=1.13, stddev=0.288]
component name=tdnnf10.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf10.noop type=NoOpComponent, dim=1024
component name=tdnnf11.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02113, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.95,0.95,0.95 0.95,0.96,0.96,0.96,0.96 0.96,0.96,0.96,0.96), mean=0.956, stddev=0.00104], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.20,0.21 0.22,0.22,0.24,0.25,0.26 0.27,0.27,0.28,0.32), mean=0.238, stddev=0.0171], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05447, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.78,0.79,0.81 0.82,0.84,0.87,0.90,0.92 0.93,0.95,0.96,1.0), mean=0.871, stddev=0.0403], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.7,1.7,1.7 1.7,1.7,1.7,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.74, stddev=0.0371], bias-{mean,stddev}=-0.04611,0.9041, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf11.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.77e+05, self-repaired-proportion=0.0136393, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.09,0.14,0.20 0.26,0.37,0.73,1.2,1.5 1.8,2.0,2.1,3.0), mean=0.811, stddev=0.492], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.08,0.13,0.18 0.22,0.29,0.48,0.67,0.76 0.81,0.86,0.89,0.98), mean=0.485, stddev=0.201], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.002,0.003,0.004,0.005 0.006,0.008,0.009,0.02), mean=0.00339, stddev=0.00151], oderiv-count=1.20957e+06
component name=tdnnf11.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=6305.34, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.11,0.17,0.23 0.29,0.40,0.73,1.2,1.4 1.7,1.9,2.0,2.8), mean=0.804, stddev=0.453], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.50,0.54,0.64 0.72,0.86,1.1,1.4,1.5 1.6,1.7,1.8,2.0), mean=1.11, stddev=0.291]
component name=tdnnf11.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf11.noop type=NoOpComponent, dim=1024
component name=tdnnf12.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02114, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.95,0.95,0.96 0.96,0.96,0.96,0.96,0.96 0.96,0.96,0.96,0.96), mean=0.957, stddev=0.000913], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.20,0.21 0.22,0.22,0.24,0.25,0.26 0.27,0.28,0.28,0.32), mean=0.238, stddev=0.0175], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05439, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.78,0.79,0.81 0.82,0.84,0.87,0.90,0.92 0.93,0.95,0.96,0.99), mean=0.869, stddev=0.039], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.7,1.7 1.7,1.7,1.7,1.8,1.8 1.8,1.8,1.8,1.8), mean=1.74, stddev=0.0367], bias-{mean,stddev}=-0.02372,0.879, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf12.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.7e+05, self-repaired-proportion=0.0104212, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.12,0.15,0.21 0.27,0.40,0.74,1.2,1.5 1.8,2.1,2.3,3.0), mean=0.831, stddev=0.497], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.11,0.13,0.17 0.24,0.31,0.49,0.66,0.75 0.81,0.86,0.89,0.97), mean=0.487, stddev=0.192], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.002,0.003,0.004,0.005 0.005,0.007,0.008,0.01), mean=0.00323, stddev=0.00131], oderiv-count=1.15082e+06
component name=tdnnf12.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=6049.34, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.16,0.18,0.24 0.29,0.44,0.73,1.2,1.4 1.7,2.0,2.1,2.8), mean=0.821, stddev=0.458], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.52,0.58,0.65 0.74,0.86,1.1,1.4,1.5 1.6,1.8,1.9,2.2), mean=1.12, stddev=0.299]
component name=tdnnf12.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf12.noop type=NoOpComponent, dim=1024
component name=tdnnf13.linear type=TdnnComponent, input-dim=1024, output-dim=128, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, orthonormal-constraint=-1, time-offsets=-3,0, linear-params-rms=0.02115, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.96,0.96,0.96 0.96,0.96,0.96,0.96,0.96 0.96,0.96,0.96,0.96), mean=0.957, stddev=-nan], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.20,0.21 0.22,0.22,0.24,0.25,0.26 0.27,0.28,0.28,0.31), mean=0.239, stddev=0.0177], has-bias=false, rank-in=20, rank-out=64, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.affine type=TdnnComponent, input-dim=128, output-dim=1024, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, time-offsets=0,3, linear-params-rms=0.05443, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.78,0.79,0.80 0.82,0.84,0.87,0.90,0.92 0.94,0.95,0.96,1.0), mean=0.87, stddev=0.0404], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.7,1.7,1.7 1.7,1.7,1.7,1.8,1.8 1.8,1.8,1.8,1.9), mean=1.74, stddev=0.0387], bias-{mean,stddev}=-0.01132,0.8724, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha-in=4, alpha-out=4
component name=tdnnf13.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.12e+05, self-repaired-proportion=0.00679895, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.12,0.15,0.22 0.29,0.40,0.72,1.2,1.5 1.7,2.1,2.2,2.8), mean=0.83, stddev=0.486], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.11,0.14,0.18 0.24,0.31,0.49,0.66,0.74 0.81,0.85,0.89,0.94), mean=0.49, stddev=0.19], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.002,0.003,0.004,0.005 0.005,0.007,0.008,0.02), mean=0.00316, stddev=0.00125], oderiv-count=1.09558e+06
component name=tdnnf13.batchnorm type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=5793.34, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.15,0.17,0.25 0.31,0.43,0.74,1.2,1.5 1.6,1.9,2.1,2.7), mean=0.821, stddev=0.447], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.50,0.55,0.66 0.75,0.86,1.1,1.4,1.5 1.6,1.7,1.8,2.4), mean=1.11, stddev=0.294]
component name=tdnnf13.dropout type=GeneralDropoutComponent, dim=1024, block-dim=1024, dropout-proportion=0, continuous=true
component name=tdnnf13.noop type=NoOpComponent, dim=1024
component name=prefinal-l type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, params-rms=0.02835, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.91,0.91,0.91 0.91,0.91,0.91,0.91,0.91 0.91,0.91,0.91,0.91), mean=0.907, stddev=0.000244], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.40,0.41 0.42,0.43,0.45,0.47,0.48 0.50,0.50,0.51,0.54), mean=0.453, stddev=0.0262], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.0547, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.75,0.79,0.80,0.81 0.82,0.84,0.87,0.91,0.93 0.94,0.95,0.95,0.99), mean=0.874, stddev=0.0384], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.7,1.7,1.7 1.7,1.7,1.7,1.8,1.8 1.8,1.8,1.8,1.9), mean=1.75, stddev=0.0374], bias-{mean,stddev}=-0.00726,0.8889, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.19e+05, self-repaired-proportion=0.0171519, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.06,0.10,0.13 0.21,0.32,0.66,1.1,1.4 1.7,2.1,2.4,2.9), mean=0.752, stddev=0.505], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.07,0.10,0.15 0.21,0.30,0.48,0.69,0.78 0.85,0.90,0.93,0.98), mean=0.49, stddev=0.212], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.003,0.003,0.005,0.006 0.008,0.01,0.01,0.03), mean=0.00399, stddev=0.00211], oderiv-count=1.13824e+06
component name=prefinal-chain.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=5793.34, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.06,0.10,0.14 0.23,0.33,0.64,1.1,1.3 1.6,2.0,2.2,2.7), mean=0.73, stddev=0.466], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.31,0.39,0.48 0.58,0.70,0.97,1.2,1.3 1.4,1.5,1.6,2.0), mean=0.96, stddev=0.287]
component name=prefinal-chain.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, params-rms=0.02909, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.93,0.93,0.93 0.93,0.93,0.93,0.93,0.93 0.93,0.93,0.93,0.93), mean=0.931, stddev=0.000546], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.39,0.40,0.41 0.43,0.44,0.46,0.49,0.50 0.51,0.53,0.53,0.59), mean=0.465, stddev=0.0302], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-chain.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=5793.34, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1e-07,-1e-07,-1e-07,-8e-08 -6e-08,-4e-08,-5e-10,4e-08,6e-08 8e-08,1e-07,1e-07,1e-07), mean=7.06e-10, stddev=4.76e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.0,1.1 1.1,1.1,1.2,1.2,1.3 1.3,1.3,1.4,1.4), mean=1.17, stddev=0.0778]
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3800, learning-rate=0.00075, l2-regularize=0.002, max-change=1.5, linear-params-rms=0.01263, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-10,4e-10,4e-10,4e-10 0.0002,0.001,0.12,0.30,0.35 0.38,0.40,0.42,0.47), mean=0.15, stddev=0.136], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.58,0.61,0.66 0.69,0.72,0.77,0.83,0.86 0.90,0.93,0.93,1.0), mean=0.775, stddev=0.0722], bias-{mean,stddev}=0.0001327,0.05052, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=1024, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, linear-params-rms=0.05325, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.73,0.75,0.76,0.78 0.80,0.82,0.85,0.89,0.90 0.92,0.94,0.95,0.97), mean=0.851, stddev=0.0421], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.6,1.6,1.6,1.6 1.7,1.7,1.7,1.7,1.7 1.8,1.8,1.8,1.9), mean=1.7, stddev=0.0379], bias-{mean,stddev}=0.001984,0.8624, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.relu type=RectifiedLinearComponent, dim=1024, self-repair-scale=1e-05, count=7.74e+05, self-repaired-proportion=0.0171371, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.06,0.09,0.16 0.23,0.34,0.62,1.1,1.4 1.6,2.0,2.2,3.3), mean=0.737, stddev=0.478], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.06,0.10,0.16 0.22,0.31,0.49,0.70,0.79 0.85,0.89,0.92,1.0), mean=0.496, stddev=0.21], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0006,0.0006,0.0007 0.0008,0.0009,0.001,0.002,0.002 0.002,0.003,0.003,0.03), mean=0.00145, stddev=0.00207], oderiv-count=1.11718e+06
component name=prefinal-xent.batchnorm1 type=BatchNormComponent, dim=1024, block-dim=1024, epsilon=0.001, target-rms=1, count=5793.34, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,0.08,0.11,0.19 0.25,0.35,0.59,1.0,1.3 1.6,1.9,2.1,3.0), mean=0.703, stddev=0.436], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.36,0.44,0.53 0.62,0.70,0.89,1.1,1.2 1.3,1.4,1.5,1.8), mean=0.902, stddev=0.248]
component name=prefinal-xent.linear type=LinearComponent, input-dim=1024, output-dim=256, learning-rate=0.00075, l2-regularize=0.008, max-change=0.75, params-rms=0.02403, params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.77,0.77,0.77 0.77,0.77,0.77,0.77,0.77 0.77,0.77,0.77,0.77), mean=0.769, stddev=0], params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.30,0.32,0.33 0.34,0.36,0.38,0.41,0.42 0.43,0.45,0.45,0.48), mean=0.383, stddev=0.0318], orthonormal-constraint=-1, use-natural-gradient=true, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=prefinal-xent.batchnorm2 type=BatchNormComponent, dim=256, block-dim=256, epsilon=0.001, target-rms=1, count=5793.34, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8e-08,-7e-08,-6e-08,-5e-08 -4e-08,-2e-08,5e-09,3e-08,5e-08 5e-08,6e-08,8e-08,9e-08), mean=4.56e-09, stddev=3.13e-08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.62,0.63,0.64 0.66,0.68,0.74,0.81,0.85 0.88,0.91,0.93,1.0), mean=0.749, stddev=0.0757]
component name=output-xent.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3800, learning-rate=0.00375, l2-regularize=0.002, learning-rate-factor=5, max-change=1.5, linear-params-rms=0.02749, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.13,0.67,0.79 0.88,0.96,1.0,1.3), mean=0.304, stddev=0.318], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.3 1.3,1.4,1.7,1.9,2.0 2.1,2.1,2.2,2.3), mean=1.67, stddev=0.263], bias-{mean,stddev}=1.123e-08,0.1058, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output-xent.log-softmax type=LogSoftmaxComponent, dim=3800, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.0004,0.001,0.002 0.002,0.003,0.004,0.05), mean=0.000705, stddev=0.00117], oderiv-count=1.13354e+06
nnet3-show-progress --use-gpu=no telugu_exp/chain_cleaned_1d/tdnn1d_sp/0.mdl telugu_exp/chain_cleaned_1d/tdnn1d_sp/1.mdl 
LOG (nnet3-show-progress[5.5.1009~1-e4940]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1009~1-e4940]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:8.25345 tdnnf2.linear:7.00138 tdnnf2.affine:7.3334 tdnnf3.linear:5.97185 tdnnf3.affine:6.54974 tdnnf4.linear:5.47206 tdnnf4.affine:6.61693 tdnnf5.linear:4.74785 tdnnf5.affine:6.15657 tdnnf6.linear:5.3132 tdnnf6.affine:6.23491 tdnnf7.linear:5.23027 tdnnf7.affine:6.36686 tdnnf8.linear:5.15083 tdnnf8.affine:6.42712 tdnnf9.linear:5.12789 tdnnf9.affine:6.3686 tdnnf10.linear:5.17235 tdnnf10.affine:6.39755 tdnnf11.linear:5.21251 tdnnf11.affine:6.50023 tdnnf12.linear:5.26284 tdnnf12.affine:6.4751 tdnnf13.linear:5.48796 tdnnf13.affine:6.52842 prefinal-l:6.99482 prefinal-chain.affine:6.46445 prefinal-chain.linear:5.67855 output.affine:12.842 prefinal-xent.affine:6.79801 prefinal-xent.linear:6.70477 output-xent.affine:27.8909 ]
LOG (nnet3-show-progress[5.5.1009~1-e4940]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:39.0198 tdnnf2.linear:12.4258 tdnnf2.affine:38.9309 tdnnf3.linear:11.4157 tdnnf3.affine:38.8569 tdnnf4.linear:11.1166 tdnnf4.affine:40.438 tdnnf5.linear:10.5286 tdnnf5.affine:39.4741 tdnnf6.linear:10.8962 tdnnf6.affine:38.5113 tdnnf7.linear:10.8738 tdnnf7.affine:39.7657 tdnnf8.linear:10.8248 tdnnf8.affine:40.0885 tdnnf9.linear:10.812 tdnnf9.affine:39.632 tdnnf10.linear:10.7793 tdnnf10.affine:39.76 tdnnf11.linear:10.8174 tdnnf11.affine:40.2106 tdnnf12.linear:10.8216 tdnnf12.affine:39.5886 tdnnf13.linear:10.8281 tdnnf13.affine:39.4475 prefinal-l:14.5129 prefinal-chain.affine:39.9188 prefinal-chain.linear:14.896 output.affine:12.842 prefinal-xent.affine:38.7928 prefinal-xent.linear:12.3013 output-xent.affine:27.8909 ]
LOG (nnet3-show-progress[5.5.1009~1-e4940]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.183686 tdnnf2.linear:0.618962 tdnnf2.affine:0.163363 tdnnf3.linear:0.528285 tdnnf3.affine:0.147031 tdnnf4.linear:0.482829 tdnnf4.affine:0.142913 tdnnf5.linear:0.419579 tdnnf5.affine:0.135994 tdnnf6.linear:0.46944 tdnnf6.affine:0.141356 tdnnf7.linear:0.462523 tdnnf7.affine:0.139806 tdnnf8.linear:0.454745 tdnnf8.affine:0.139969 tdnnf9.linear:0.453855 tdnnf9.affine:0.140283 tdnnf10.linear:0.457868 tdnnf10.affine:0.140442 tdnnf11.linear:0.460694 tdnnf11.affine:0.141077 tdnnf12.linear:0.463959 tdnnf12.affine:0.14267 tdnnf13.linear:0.486462 tdnnf13.affine:0.144308 prefinal-l:0.437253 prefinal-chain.affine:0.141709 prefinal-chain.linear:0.355271 output.affine:inf prefinal-xent.affine:0.151008 prefinal-xent.linear:0.419106 output-xent.affine:inf ]
# Accounting: time=1 threads=1
# Ended (code 0) at Wed Jun 15 02:12:12 UTC 2022, elapsed time 1 seconds
